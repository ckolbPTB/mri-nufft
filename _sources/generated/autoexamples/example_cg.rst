
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/autoexamples/example_cg.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_autoexamples_example_cg.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_autoexamples_example_cg.py:


Example of using the Conjugate Gradient method.

This script demonstrates the use of the Conjugate Gradient (CG) method 
for solving systems of linear equations of the form Ax = b, where A is a symmetric 
positive-definite matrix. The CG method is an iterative algorithm that is particularly 
useful for large, sparse systems where direct methods are computationally expensive.

The Conjugate Gradient method is widely used in various scientific and engineering 
applications, including solving partial differential equations, optimization problems, 
and machine learning tasks.

References
----------
- Inpirations: 
        - https://sigpy.readthedocs.io/en/latest/_modules/sigpy/alg.html#ConjugateGradient
        - https://aquaulb.github.io/book_solving_pde_mooc/solving_pde_mooc/notebooks/05_IterativeMethods/05_02_Conjugate_Gradient.html
- Wikipedia: 
        - https://en.wikipedia.org/wiki/Conjugate_gradient_method 
        - https://en.wikipedia.org/wiki/Momentum 

.. GENERATED FROM PYTHON SOURCE LINES 25-26

Imports

.. GENERATED FROM PYTHON SOURCE LINES 26-33

.. code-block:: Python

    import numpy as np
    import mrinufft
    from brainweb_dl import get_mri
    from mrinufft.extras.gradient import cg
    from mrinufft.density import voronoi
    from matplotlib import pyplot as plt





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /volatile/github-ci-mind-inria/action-runner/_work/_tool/Python/3.10.14/x64/lib/python3.10/site-packages/cupy/_environment.py:487: UserWarning: 
    --------------------------------------------------------------------------------

      CuPy may not function correctly because multiple CuPy packages are installed
      in your environment:

        cupy-cuda11x, cupy-cuda12x

      Follow these steps to resolve this issue:

        1. For all packages listed above, run the following command to remove all
           existing CuPy installations:

             $ pip uninstall <package_name>

          If you previously installed CuPy via conda, also run the following:

             $ conda uninstall cupy

        2. Install the appropriate CuPy package.
           Refer to the Installation Guide for detailed instructions.

             https://docs.cupy.dev/en/stable/install.html

    --------------------------------------------------------------------------------

      warnings.warn(f'''




.. GENERATED FROM PYTHON SOURCE LINES 34-35

Setup Inputs

.. GENERATED FROM PYTHON SOURCE LINES 35-39

.. code-block:: Python

    samples_loc = mrinufft.initialize_2D_spiral(Nc=64, Ns=256)
    image = get_mri(sub_id=4)
    image = np.flipud(image[90])








.. GENERATED FROM PYTHON SOURCE LINES 40-41

Setup the NUFFT operator

.. GENERATED FROM PYTHON SOURCE LINES 41-48

.. code-block:: Python

    NufftOperator = mrinufft.get_operator("gpunufft")  # get the operator
    density = voronoi(samples_loc)  # get the density

    nufft = NufftOperator(
        samples_loc, shape=image.shape, density=density, n_coils=1
    )  # create the NUFFT operator








.. GENERATED FROM PYTHON SOURCE LINES 49-50

Reconstruct the image using the CG method

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: Python

    kspace_data = nufft.op(image)  # get the k-space data
    reconstructed_image = cg(nufft, kspace_data)  # reconstruct the image








.. GENERATED FROM PYTHON SOURCE LINES 54-55

Display the results

.. GENERATED FROM PYTHON SOURCE LINES 55-69

.. code-block:: Python

    plt.figure(figsize=(10, 5))
    plt.subplot(1, 3, 1)
    plt.title("Original Image")
    plt.imshow(abs(image), cmap="gray")

    plt.subplot(1, 3, 2)
    plt.title("Reconstructed Image with CG")
    plt.imshow(abs(reconstructed_image), cmap="gray")

    plt.subplot(1, 3, 3)
    plt.title("Reconstructed Image with adjoint")
    plt.imshow(abs(nufft.adj_op(kspace_data)), cmap="gray")

    plt.show()



.. image-sg:: /generated/autoexamples/images/sphx_glr_example_cg_001.png
   :alt: Original Image, Reconstructed Image with CG, Reconstructed Image with adjoint
   :srcset: /generated/autoexamples/images/sphx_glr_example_cg_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.261 seconds)


.. _sphx_glr_download_generated_autoexamples_example_cg.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mind-inria/mri-nufft/gh-pages?urlpath=lab/tree/examples/generated/autoexamples/example_cg.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_cg.ipynb <example_cg.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_cg.py <example_cg.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: example_cg.zip <example_cg.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
