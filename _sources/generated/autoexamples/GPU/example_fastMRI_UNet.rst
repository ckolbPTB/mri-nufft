
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/autoexamples/GPU/example_fastMRI_UNet.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_autoexamples_GPU_example_fastMRI_UNet.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_autoexamples_GPU_example_fastMRI_UNet.py:


==================
Simple UNet model.
==================

This model is a simplified version of the U-Net architecture, 
which is widely used for image segmentation tasks.  
This is implemented in the proprietary FASTMRI package [fastmri]_.  

The U-Net model consists of an encoder (downsampling path) and 
a decoder (upsampling path) with skip connections between corresponding 
layers in the encoder and decoder. 
These skip connections help in retaining spatial information 
that is lost during the downsampling process.

The primary purpose of this model is to perform image reconstruction tasks, 
specifically for MRI images. 
It takes an input MRI image and reconstructs it to improve the image quality 
or to recover missing parts of the image.

This implementation of the UNet model was pulled from the FastMRI Facebook 
repository, which is a collaborative research project aimed at advancing 
the field of medical imaging using machine learning techniques.

.. math::

    \mathbf{\hat{x}} = \mathrm{arg} \min_{\mathbf{x}} || \mathcal{U}_\mathbf{\theta}(\mathbf{y}) - \mathbf{x} ||_2^2

where :math:`\mathbf{\hat{x}}` is the reconstructed MRI image, :math:`\mathbf{x}` is the ground truth image, 
:math:`\mathbf{y}` is the input MRI image (e.g., k-space data), and :math:`\mathcal{U}_\mathbf{\theta}` is the U-Net model parameterized by :math:`\theta`.

.. warning::
    We train on a single image here. In practice, this should be done on a database like fastMRI [fastmri]_.

.. GENERATED FROM PYTHON SOURCE LINES 38-39

Imports

.. GENERATED FROM PYTHON SOURCE LINES 39-56

.. code-block:: Python

    import os
    from pathlib import Path
    import shutil
    import brainweb_dl as bwdl
    import matplotlib.pyplot as plt
    import numpy as np
    import torch
    from tqdm import tqdm
    import time
    import joblib
    from PIL import Image
    import tempfile as tmp

    from fastmri.models import Unet
    from mrinufft import get_operator
    from mrinufft.trajectories import initialize_2D_cones








.. GENERATED FROM PYTHON SOURCE LINES 57-58

Setup a simple class for the U-Net model

.. GENERATED FROM PYTHON SOURCE LINES 58-81

.. code-block:: Python



    class Model(torch.nn.Module):
        """Model for MRI reconstruction using a U-Net."""

        def __init__(self, initial_trajectory):
            super().__init__()
            self.operator = get_operator("gpunufft", wrt_data=True)(
                initial_trajectory,
                shape=(256, 256),
                density=True,
                squeeze_dims=False,
            )
            self.unet = Unet(in_chans=1, out_chans=1, chans=32, num_pool_layers=4)

        def forward(self, kspace):
            """Forward pass of the model."""
            image = self.operator.adj_op(kspace)
            recon = self.unet(image.float()).abs()
            recon /= torch.mean(recon)
            return recon









.. GENERATED FROM PYTHON SOURCE LINES 82-83

Utility function to plot the state of the model

.. GENERATED FROM PYTHON SOURCE LINES 83-118

.. code-block:: Python

    def plot_state(axs, mri_2D, traj, recon, loss=None, save_name=None):
        """Image plotting function.

        Plot the original MRI image, the trajectory, the reconstructed image,
        and the loss curve (if provided). Saves the plot if a filename is provided.

        Parameters
        ----------
        axs (numpy array): Array of matplotlib axes to plot on.
        mri_2D (torch.Tensor): Original MRI image.
        traj : Trajectory.
        recon (torch.Tensor): Reconstructed image after training.
        loss (list, optional): List of loss values to plot. Defaults to None.
        save_name (str, optional): Filename to save the plot. Defaults to None.
        """
        axs = axs.flatten()
        axs[0].imshow(np.abs(mri_2D[0]), cmap="gray")
        axs[0].axis("off")
        axs[0].set_title("MR Image")
        axs[1].scatter(*traj.T, s=0.5)
        axs[1].set_title("Trajectory")
        axs[2].imshow(np.abs(recon[0][0].detach().cpu().numpy()), cmap="gray")
        axs[2].axis("off")
        axs[2].set_title("Reconstruction")
        if loss is not None:
            axs[3].plot(loss)
            axs[3].grid("on")
            axs[3].set_title("Loss")
        if save_name is not None:
            plt.savefig(save_name, bbox_inches="tight")
            plt.close()
        else:
            plt.show()









.. GENERATED FROM PYTHON SOURCE LINES 119-120

Setup Inputs (models, trajectory and image)

.. GENERATED FROM PYTHON SOURCE LINES 120-124

.. code-block:: Python

    init_traj = initialize_2D_cones(32, 256).reshape(-1, 2).astype(np.float32)
    model = Model(init_traj)
    model.eval()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Model(
      (operator): MRINufftAutoGrad()
      (unet): Unet(
        (down_sample_layers): ModuleList(
          (0): ConvBlock(
            (layers): Sequential(
              (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (2): LeakyReLU(negative_slope=0.2, inplace=True)
              (3): Dropout2d(p=0.0, inplace=False)
              (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (5): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (6): LeakyReLU(negative_slope=0.2, inplace=True)
              (7): Dropout2d(p=0.0, inplace=False)
            )
          )
          (1): ConvBlock(
            (layers): Sequential(
              (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (2): LeakyReLU(negative_slope=0.2, inplace=True)
              (3): Dropout2d(p=0.0, inplace=False)
              (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (5): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (6): LeakyReLU(negative_slope=0.2, inplace=True)
              (7): Dropout2d(p=0.0, inplace=False)
            )
          )
          (2): ConvBlock(
            (layers): Sequential(
              (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (2): LeakyReLU(negative_slope=0.2, inplace=True)
              (3): Dropout2d(p=0.0, inplace=False)
              (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (5): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (6): LeakyReLU(negative_slope=0.2, inplace=True)
              (7): Dropout2d(p=0.0, inplace=False)
            )
          )
          (3): ConvBlock(
            (layers): Sequential(
              (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (2): LeakyReLU(negative_slope=0.2, inplace=True)
              (3): Dropout2d(p=0.0, inplace=False)
              (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (5): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (6): LeakyReLU(negative_slope=0.2, inplace=True)
              (7): Dropout2d(p=0.0, inplace=False)
            )
          )
        )
        (conv): ConvBlock(
          (layers): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (2): LeakyReLU(negative_slope=0.2, inplace=True)
            (3): Dropout2d(p=0.0, inplace=False)
            (4): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (5): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (6): LeakyReLU(negative_slope=0.2, inplace=True)
            (7): Dropout2d(p=0.0, inplace=False)
          )
        )
        (up_conv): ModuleList(
          (0): ConvBlock(
            (layers): Sequential(
              (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (2): LeakyReLU(negative_slope=0.2, inplace=True)
              (3): Dropout2d(p=0.0, inplace=False)
              (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (5): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (6): LeakyReLU(negative_slope=0.2, inplace=True)
              (7): Dropout2d(p=0.0, inplace=False)
            )
          )
          (1): ConvBlock(
            (layers): Sequential(
              (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (2): LeakyReLU(negative_slope=0.2, inplace=True)
              (3): Dropout2d(p=0.0, inplace=False)
              (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (5): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (6): LeakyReLU(negative_slope=0.2, inplace=True)
              (7): Dropout2d(p=0.0, inplace=False)
            )
          )
          (2): ConvBlock(
            (layers): Sequential(
              (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (2): LeakyReLU(negative_slope=0.2, inplace=True)
              (3): Dropout2d(p=0.0, inplace=False)
              (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (5): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (6): LeakyReLU(negative_slope=0.2, inplace=True)
              (7): Dropout2d(p=0.0, inplace=False)
            )
          )
          (3): Sequential(
            (0): ConvBlock(
              (layers): Sequential(
                (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (1): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
                (3): Dropout2d(p=0.0, inplace=False)
                (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (5): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
                (6): LeakyReLU(negative_slope=0.2, inplace=True)
                (7): Dropout2d(p=0.0, inplace=False)
              )
            )
            (1): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (up_transpose_conv): ModuleList(
          (0): TransposeConvBlock(
            (layers): Sequential(
              (0): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
              (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (2): LeakyReLU(negative_slope=0.2, inplace=True)
            )
          )
          (1): TransposeConvBlock(
            (layers): Sequential(
              (0): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2), bias=False)
              (1): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (2): LeakyReLU(negative_slope=0.2, inplace=True)
            )
          )
          (2): TransposeConvBlock(
            (layers): Sequential(
              (0): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2), bias=False)
              (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (2): LeakyReLU(negative_slope=0.2, inplace=True)
            )
          )
          (3): TransposeConvBlock(
            (layers): Sequential(
              (0): ConvTranspose2d(64, 32, kernel_size=(2, 2), stride=(2, 2), bias=False)
              (1): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (2): LeakyReLU(negative_slope=0.2, inplace=True)
            )
          )
        )
      )
    )



.. GENERATED FROM PYTHON SOURCE LINES 125-126

Get the image on which we will train our U-Net Model

.. GENERATED FROM PYTHON SOURCE LINES 126-139

.. code-block:: Python

    mri_2D = torch.Tensor(np.flipud(bwdl.get_mri(4, "T1")[80, ...]).astype(np.complex64))[
        None
    ]
    mri_2D = mri_2D / torch.mean(mri_2D)
    kspace_mri_2D = model.operator.op(mri_2D)

    # Before training, here is the simple reconstruction we have using a
    # density compensated adjoint.
    dc_adjoint = model.operator.adj_op(kspace_mri_2D)
    fig, axs = plt.subplots(1, 3, figsize=(15, 5))
    plot_state(axs, mri_2D, init_traj, dc_adjoint)





.. image-sg:: /generated/autoexamples/GPU/images/sphx_glr_example_fastMRI_UNet_001.png
   :alt: MR Image, Trajectory, Reconstruction
   :srcset: /generated/autoexamples/GPU/images/sphx_glr_example_fastMRI_UNet_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /volatile/github-ci-mind-inria/_work/mri-nufft/mri-nufft/examples/GPU/example_fastMRI_UNet.py:126: UserWarning: Casting complex values to real discards the imaginary part (Triggered internally at ../aten/src/ATen/native/Copy.cpp:308.)
      mri_2D = torch.Tensor(np.flipud(bwdl.get_mri(4, "T1")[80, ...]).astype(np.complex64))[




.. GENERATED FROM PYTHON SOURCE LINES 140-141

Start training loop

.. GENERATED FROM PYTHON SOURCE LINES 141-187

.. code-block:: Python

    num_epochs = 100
    optimizer = torch.optim.RAdam(model.parameters(), lr=1e-3)
    losses = []  # Store the loss values and create an animation
    image_files = []  # Store the images to create a gif
    model.train()

    with tqdm(range(num_epochs), unit="steps") as tqdms:
        for i in tqdms:
            out = model(kspace_mri_2D)  # Forward pass

            loss = torch.nn.functional.l1_loss(out, mri_2D[None])  # Compute loss
            tqdms.set_postfix({"loss": loss.item()})  # Update progress bar
            losses.append(loss.item())  # Store loss value

            optimizer.zero_grad()  # Zero gradients
            loss.backward()  # Backward pass
            optimizer.step()  # Update weights

            # Generate images for gif
            hashed = joblib.hash((i, "learn_traj", time.time()))
            filename = f"{tmp.NamedTemporaryFile().name}.png"
            fig, axs = plt.subplots(2, 2, figsize=(10, 10))
            plot_state(
                axs,
                mri_2D,
                init_traj,
                out,
                losses,
                save_name=filename,
            )
            image_files.append(filename)


    # Make a GIF of all images.
    imgs = [Image.open(img) for img in image_files]
    imgs[0].save(
        "mrinufft_learn_unet.gif",
        save_all=True,
        append_images=imgs[1:],
        optimize=False,
        duration=2,
        loop=0,
    )

    # sphinx_gallery_thumbnail_path = 'generated/autoexamples/GPU/images/mrinufft_learn_unet.gif'





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/100 [00:00<?, ?steps/s]      0%|          | 0/100 [00:00<?, ?steps/s, loss=0.889]      1%|          | 1/100 [00:00<01:32,  1.07steps/s, loss=0.889]      1%|          | 1/100 [00:01<01:32,  1.07steps/s, loss=0.87]       2%|▏         | 2/100 [00:01<01:27,  1.12steps/s, loss=0.87]      2%|▏         | 2/100 [00:01<01:27,  1.12steps/s, loss=0.852]      3%|▎         | 3/100 [00:02<01:33,  1.04steps/s, loss=0.852]      3%|▎         | 3/100 [00:02<01:33,  1.04steps/s, loss=0.836]      4%|▍         | 4/100 [00:03<01:28,  1.08steps/s, loss=0.836]      4%|▍         | 4/100 [00:03<01:28,  1.08steps/s, loss=0.822]      5%|▌         | 5/100 [00:04<01:25,  1.11steps/s, loss=0.822]      5%|▌         | 5/100 [00:04<01:25,  1.11steps/s, loss=0.808]      6%|▌         | 6/100 [00:05<01:23,  1.13steps/s, loss=0.808]      6%|▌         | 6/100 [00:05<01:23,  1.13steps/s, loss=0.766]      7%|▋         | 7/100 [00:06<01:21,  1.13steps/s, loss=0.766]      7%|▋         | 7/100 [00:06<01:21,  1.13steps/s, loss=0.73]       8%|▊         | 8/100 [00:07<01:19,  1.15steps/s, loss=0.73]      8%|▊         | 8/100 [00:07<01:19,  1.15steps/s, loss=0.697]      9%|▉         | 9/100 [00:07<01:18,  1.16steps/s, loss=0.697]      9%|▉         | 9/100 [00:08<01:18,  1.16steps/s, loss=0.666]     10%|█         | 10/100 [00:08<01:15,  1.19steps/s, loss=0.666]     10%|█         | 10/100 [00:08<01:15,  1.19steps/s, loss=0.636]     11%|█         | 11/100 [00:09<01:13,  1.20steps/s, loss=0.636]     11%|█         | 11/100 [00:09<01:13,  1.20steps/s, loss=0.609]     12%|█▏        | 12/100 [00:10<01:13,  1.20steps/s, loss=0.609]     12%|█▏        | 12/100 [00:10<01:13,  1.20steps/s, loss=0.584]     13%|█▎        | 13/100 [00:11<01:19,  1.10steps/s, loss=0.584]     13%|█▎        | 13/100 [00:11<01:19,  1.10steps/s, loss=0.56]      14%|█▍        | 14/100 [00:12<01:16,  1.13steps/s, loss=0.56]     14%|█▍        | 14/100 [00:12<01:16,  1.13steps/s, loss=0.537]     15%|█▌        | 15/100 [00:13<01:14,  1.14steps/s, loss=0.537]     15%|█▌        | 15/100 [00:13<01:14,  1.14steps/s, loss=0.514]     16%|█▌        | 16/100 [00:14<01:12,  1.15steps/s, loss=0.514]     16%|█▌        | 16/100 [00:14<01:12,  1.15steps/s, loss=0.493]     17%|█▋        | 17/100 [00:14<01:12,  1.15steps/s, loss=0.493]     17%|█▋        | 17/100 [00:15<01:12,  1.15steps/s, loss=0.472]     18%|█▊        | 18/100 [00:15<01:10,  1.16steps/s, loss=0.472]     18%|█▊        | 18/100 [00:15<01:10,  1.16steps/s, loss=0.453]     19%|█▉        | 19/100 [00:16<01:09,  1.17steps/s, loss=0.453]     19%|█▉        | 19/100 [00:16<01:09,  1.17steps/s, loss=0.435]     20%|██        | 20/100 [00:17<01:07,  1.19steps/s, loss=0.435]     20%|██        | 20/100 [00:17<01:07,  1.19steps/s, loss=0.417]     21%|██        | 21/100 [00:18<01:05,  1.20steps/s, loss=0.417]     21%|██        | 21/100 [00:18<01:05,  1.20steps/s, loss=0.401]     22%|██▏       | 22/100 [00:19<01:05,  1.19steps/s, loss=0.401]     22%|██▏       | 22/100 [00:19<01:05,  1.19steps/s, loss=0.385]     23%|██▎       | 23/100 [00:20<01:10,  1.10steps/s, loss=0.385]     23%|██▎       | 23/100 [00:20<01:10,  1.10steps/s, loss=0.369]     24%|██▍       | 24/100 [00:20<01:07,  1.13steps/s, loss=0.369]     24%|██▍       | 24/100 [00:21<01:07,  1.13steps/s, loss=0.355]     25%|██▌       | 25/100 [00:21<01:05,  1.15steps/s, loss=0.355]     25%|██▌       | 25/100 [00:21<01:05,  1.15steps/s, loss=0.341]     26%|██▌       | 26/100 [00:22<01:03,  1.16steps/s, loss=0.341]     26%|██▌       | 26/100 [00:22<01:03,  1.16steps/s, loss=0.328]     27%|██▋       | 27/100 [00:23<01:02,  1.17steps/s, loss=0.328]     27%|██▋       | 27/100 [00:23<01:02,  1.17steps/s, loss=0.316]     28%|██▊       | 28/100 [00:24<01:01,  1.17steps/s, loss=0.316]     28%|██▊       | 28/100 [00:24<01:01,  1.17steps/s, loss=0.304]     29%|██▉       | 29/100 [00:25<01:00,  1.17steps/s, loss=0.304]     29%|██▉       | 29/100 [00:25<01:00,  1.17steps/s, loss=0.292]     30%|███       | 30/100 [00:26<00:59,  1.17steps/s, loss=0.292]     30%|███       | 30/100 [00:26<00:59,  1.17steps/s, loss=0.282]     31%|███       | 31/100 [00:26<00:59,  1.17steps/s, loss=0.282]     31%|███       | 31/100 [00:27<00:59,  1.17steps/s, loss=0.271]     32%|███▏      | 32/100 [00:27<00:59,  1.15steps/s, loss=0.271]     32%|███▏      | 32/100 [00:27<00:59,  1.15steps/s, loss=0.261]     33%|███▎      | 33/100 [00:28<01:04,  1.04steps/s, loss=0.261]     33%|███▎      | 33/100 [00:29<01:04,  1.04steps/s, loss=0.251]     34%|███▍      | 34/100 [00:29<01:02,  1.06steps/s, loss=0.251]     34%|███▍      | 34/100 [00:29<01:02,  1.06steps/s, loss=0.242]     35%|███▌      | 35/100 [00:30<00:59,  1.10steps/s, loss=0.242]     35%|███▌      | 35/100 [00:30<00:59,  1.10steps/s, loss=0.233]     36%|███▌      | 36/100 [00:31<00:57,  1.12steps/s, loss=0.233]     36%|███▌      | 36/100 [00:31<00:57,  1.12steps/s, loss=0.225]     37%|███▋      | 37/100 [00:32<00:55,  1.14steps/s, loss=0.225]     37%|███▋      | 37/100 [00:32<00:55,  1.14steps/s, loss=0.217]     38%|███▊      | 38/100 [00:33<00:52,  1.17steps/s, loss=0.217]     38%|███▊      | 38/100 [00:33<00:52,  1.17steps/s, loss=0.209]     39%|███▉      | 39/100 [00:34<00:51,  1.19steps/s, loss=0.209]     39%|███▉      | 39/100 [00:34<00:51,  1.19steps/s, loss=0.202]     40%|████      | 40/100 [00:34<00:50,  1.19steps/s, loss=0.202]     40%|████      | 40/100 [00:34<00:50,  1.19steps/s, loss=0.195]     41%|████      | 41/100 [00:35<00:48,  1.21steps/s, loss=0.195]     41%|████      | 41/100 [00:35<00:48,  1.21steps/s, loss=0.188]     42%|████▏     | 42/100 [00:36<00:52,  1.10steps/s, loss=0.188]     42%|████▏     | 42/100 [00:36<00:52,  1.10steps/s, loss=0.182]     43%|████▎     | 43/100 [00:37<00:50,  1.12steps/s, loss=0.182]     43%|████▎     | 43/100 [00:37<00:50,  1.12steps/s, loss=0.176]     44%|████▍     | 44/100 [00:38<00:49,  1.14steps/s, loss=0.176]     44%|████▍     | 44/100 [00:38<00:49,  1.14steps/s, loss=0.171]     45%|████▌     | 45/100 [00:39<00:47,  1.15steps/s, loss=0.171]     45%|████▌     | 45/100 [00:39<00:47,  1.15steps/s, loss=0.167]     46%|████▌     | 46/100 [00:40<00:46,  1.15steps/s, loss=0.167]     46%|████▌     | 46/100 [00:40<00:46,  1.15steps/s, loss=0.164]     47%|████▋     | 47/100 [00:41<00:45,  1.16steps/s, loss=0.164]     47%|████▋     | 47/100 [00:41<00:45,  1.16steps/s, loss=0.16]      48%|████▊     | 48/100 [00:41<00:44,  1.17steps/s, loss=0.16]     48%|████▊     | 48/100 [00:42<00:44,  1.17steps/s, loss=0.154]     49%|████▉     | 49/100 [00:42<00:44,  1.15steps/s, loss=0.154]     49%|████▉     | 49/100 [00:42<00:44,  1.15steps/s, loss=0.149]     50%|█████     | 50/100 [00:43<00:42,  1.16steps/s, loss=0.149]     50%|█████     | 50/100 [00:43<00:42,  1.16steps/s, loss=0.145]     51%|█████     | 51/100 [00:44<00:42,  1.17steps/s, loss=0.145]     51%|█████     | 51/100 [00:44<00:42,  1.17steps/s, loss=0.139]     52%|█████▏    | 52/100 [00:45<00:44,  1.07steps/s, loss=0.139]     52%|█████▏    | 52/100 [00:45<00:44,  1.07steps/s, loss=0.135]     53%|█████▎    | 53/100 [00:46<00:42,  1.11steps/s, loss=0.135]     53%|█████▎    | 53/100 [00:46<00:42,  1.11steps/s, loss=0.134]     54%|█████▍    | 54/100 [00:47<00:40,  1.13steps/s, loss=0.134]     54%|█████▍    | 54/100 [00:47<00:40,  1.13steps/s, loss=0.13]      55%|█████▌    | 55/100 [00:48<00:39,  1.14steps/s, loss=0.13]     55%|█████▌    | 55/100 [00:48<00:39,  1.14steps/s, loss=0.124]     56%|█████▌    | 56/100 [00:48<00:38,  1.15steps/s, loss=0.124]     56%|█████▌    | 56/100 [00:49<00:38,  1.15steps/s, loss=0.12]      57%|█████▋    | 57/100 [00:49<00:36,  1.16steps/s, loss=0.12]     57%|█████▋    | 57/100 [00:49<00:36,  1.16steps/s, loss=0.119]     58%|█████▊    | 58/100 [00:50<00:36,  1.17steps/s, loss=0.119]     58%|█████▊    | 58/100 [00:50<00:36,  1.17steps/s, loss=0.116]     59%|█████▉    | 59/100 [00:51<00:35,  1.16steps/s, loss=0.116]     59%|█████▉    | 59/100 [00:51<00:35,  1.16steps/s, loss=0.113]     60%|██████    | 60/100 [00:52<00:34,  1.15steps/s, loss=0.113]     60%|██████    | 60/100 [00:52<00:34,  1.15steps/s, loss=0.115]     61%|██████    | 61/100 [00:53<00:34,  1.14steps/s, loss=0.115]     61%|██████    | 61/100 [00:53<00:34,  1.14steps/s, loss=0.11]      62%|██████▏   | 62/100 [00:54<00:36,  1.04steps/s, loss=0.11]     62%|██████▏   | 62/100 [00:54<00:36,  1.04steps/s, loss=0.106]     63%|██████▎   | 63/100 [00:55<00:34,  1.06steps/s, loss=0.106]     63%|██████▎   | 63/100 [00:55<00:34,  1.06steps/s, loss=0.111]     64%|██████▍   | 64/100 [00:56<00:32,  1.10steps/s, loss=0.111]     64%|██████▍   | 64/100 [00:56<00:32,  1.10steps/s, loss=0.107]     65%|██████▌   | 65/100 [00:57<00:31,  1.12steps/s, loss=0.107]     65%|██████▌   | 65/100 [00:57<00:31,  1.12steps/s, loss=0.0997]     66%|██████▌   | 66/100 [00:57<00:29,  1.13steps/s, loss=0.0997]     66%|██████▌   | 66/100 [00:57<00:29,  1.13steps/s, loss=0.0972]     67%|██████▋   | 67/100 [00:58<00:28,  1.14steps/s, loss=0.0972]     67%|██████▋   | 67/100 [00:58<00:28,  1.14steps/s, loss=0.096]      68%|██████▊   | 68/100 [00:59<00:27,  1.15steps/s, loss=0.096]     68%|██████▊   | 68/100 [00:59<00:27,  1.15steps/s, loss=0.0915]     69%|██████▉   | 69/100 [01:00<00:26,  1.16steps/s, loss=0.0915]     69%|██████▉   | 69/100 [01:00<00:26,  1.16steps/s, loss=0.0917]     70%|███████   | 70/100 [01:01<00:25,  1.16steps/s, loss=0.0917]     70%|███████   | 70/100 [01:01<00:25,  1.16steps/s, loss=0.0929]     71%|███████   | 71/100 [01:02<00:27,  1.07steps/s, loss=0.0929]     71%|███████   | 71/100 [01:02<00:27,  1.07steps/s, loss=0.0908]     72%|███████▏  | 72/100 [01:03<00:25,  1.10steps/s, loss=0.0908]     72%|███████▏  | 72/100 [01:03<00:25,  1.10steps/s, loss=0.0903]     73%|███████▎  | 73/100 [01:04<00:24,  1.12steps/s, loss=0.0903]     73%|███████▎  | 73/100 [01:04<00:24,  1.12steps/s, loss=0.0838]     74%|███████▍  | 74/100 [01:04<00:22,  1.14steps/s, loss=0.0838]     74%|███████▍  | 74/100 [01:05<00:22,  1.14steps/s, loss=0.082]      75%|███████▌  | 75/100 [01:05<00:21,  1.16steps/s, loss=0.082]     75%|███████▌  | 75/100 [01:05<00:21,  1.16steps/s, loss=0.0825]     76%|███████▌  | 76/100 [01:06<00:20,  1.17steps/s, loss=0.0825]     76%|███████▌  | 76/100 [01:06<00:20,  1.17steps/s, loss=0.0791]     77%|███████▋  | 77/100 [01:07<00:19,  1.17steps/s, loss=0.0791]     77%|███████▋  | 77/100 [01:07<00:19,  1.17steps/s, loss=0.0793]     78%|███████▊  | 78/100 [01:08<00:18,  1.17steps/s, loss=0.0793]     78%|███████▊  | 78/100 [01:08<00:18,  1.17steps/s, loss=0.0763]     79%|███████▉  | 79/100 [01:09<00:17,  1.17steps/s, loss=0.0763]     79%|███████▉  | 79/100 [01:09<00:17,  1.17steps/s, loss=0.0729]     80%|████████  | 80/100 [01:10<00:17,  1.17steps/s, loss=0.0729]     80%|████████  | 80/100 [01:10<00:17,  1.17steps/s, loss=0.0714]     81%|████████  | 81/100 [01:11<00:17,  1.07steps/s, loss=0.0714]     81%|████████  | 81/100 [01:11<00:17,  1.07steps/s, loss=0.073]      82%|████████▏ | 82/100 [01:11<00:16,  1.10steps/s, loss=0.073]     82%|████████▏ | 82/100 [01:12<00:16,  1.10steps/s, loss=0.073]     83%|████████▎ | 83/100 [01:12<00:15,  1.12steps/s, loss=0.073]     83%|████████▎ | 83/100 [01:12<00:15,  1.12steps/s, loss=0.0747]     84%|████████▍ | 84/100 [01:13<00:14,  1.13steps/s, loss=0.0747]     84%|████████▍ | 84/100 [01:13<00:14,  1.13steps/s, loss=0.0753]     85%|████████▌ | 85/100 [01:14<00:13,  1.11steps/s, loss=0.0753]     85%|████████▌ | 85/100 [01:14<00:13,  1.11steps/s, loss=0.0729]     86%|████████▌ | 86/100 [01:15<00:12,  1.13steps/s, loss=0.0729]     86%|████████▌ | 86/100 [01:15<00:12,  1.13steps/s, loss=0.066]      87%|████████▋ | 87/100 [01:16<00:11,  1.16steps/s, loss=0.066]     87%|████████▋ | 87/100 [01:16<00:11,  1.16steps/s, loss=0.0642]     88%|████████▊ | 88/100 [01:17<00:10,  1.19steps/s, loss=0.0642]     88%|████████▊ | 88/100 [01:17<00:10,  1.19steps/s, loss=0.0663]     89%|████████▉ | 89/100 [01:17<00:09,  1.21steps/s, loss=0.0663]     89%|████████▉ | 89/100 [01:18<00:09,  1.21steps/s, loss=0.0666]     90%|█████████ | 90/100 [01:18<00:08,  1.23steps/s, loss=0.0666]     90%|█████████ | 90/100 [01:18<00:08,  1.23steps/s, loss=0.0638]     91%|█████████ | 91/100 [01:19<00:07,  1.13steps/s, loss=0.0638]     91%|█████████ | 91/100 [01:19<00:07,  1.13steps/s, loss=0.0621]     92%|█████████▏| 92/100 [01:20<00:06,  1.17steps/s, loss=0.0621]     92%|█████████▏| 92/100 [01:20<00:06,  1.17steps/s, loss=0.0599]     93%|█████████▎| 93/100 [01:21<00:05,  1.19steps/s, loss=0.0599]     93%|█████████▎| 93/100 [01:21<00:05,  1.19steps/s, loss=0.0617]     94%|█████████▍| 94/100 [01:22<00:04,  1.21steps/s, loss=0.0617]     94%|█████████▍| 94/100 [01:22<00:04,  1.21steps/s, loss=0.0622]     95%|█████████▌| 95/100 [01:22<00:04,  1.22steps/s, loss=0.0622]     95%|█████████▌| 95/100 [01:23<00:04,  1.22steps/s, loss=0.0571]     96%|█████████▌| 96/100 [01:23<00:03,  1.22steps/s, loss=0.0571]     96%|█████████▌| 96/100 [01:23<00:03,  1.22steps/s, loss=0.0555]     97%|█████████▋| 97/100 [01:24<00:02,  1.21steps/s, loss=0.0555]     97%|█████████▋| 97/100 [01:24<00:02,  1.21steps/s, loss=0.0579]     98%|█████████▊| 98/100 [01:25<00:01,  1.22steps/s, loss=0.0579]     98%|█████████▊| 98/100 [01:25<00:01,  1.22steps/s, loss=0.0577]     99%|█████████▉| 99/100 [01:26<00:00,  1.22steps/s, loss=0.0577]     99%|█████████▉| 99/100 [01:26<00:00,  1.22steps/s, loss=0.0583]    100%|██████████| 100/100 [01:26<00:00,  1.24steps/s, loss=0.0583]    100%|██████████| 100/100 [01:26<00:00,  1.15steps/s, loss=0.0583]




.. GENERATED FROM PYTHON SOURCE LINES 212-216

.. image-sg:: /generated/autoexamples/GPU/images/mrinufft_learn_unet.gif
   :alt: example learn_samples
   :srcset: /generated/autoexamples/GPU/images/mrinufft_learn_unet.gif
   :class: sphx-glr-single-img

.. GENERATED FROM PYTHON SOURCE LINES 218-219

Reconstruction from partially trained U-Net model

.. GENERATED FROM PYTHON SOURCE LINES 219-225

.. code-block:: Python

    model.eval()
    new_recon = model(kspace_mri_2D)
    fig, axs = plt.subplots(2, 2, figsize=(10, 10))
    plot_state(axs, mri_2D, init_traj, new_recon, losses)
    plt.show()




.. image-sg:: /generated/autoexamples/GPU/images/sphx_glr_example_fastMRI_UNet_002.png
   :alt: MR Image, Trajectory, Reconstruction, Loss
   :srcset: /generated/autoexamples/GPU/images/sphx_glr_example_fastMRI_UNet_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 226-234

References
==========

.. [fastmri] O. Ronneberger, P. Fischer, and Thomas Brox. U-net: Convolutional networks
          for biomedical image segmentation. In International Conference on Medical
          image computing and computer-assisted intervention, pages 234–241.
          Springer, 2015.
          https://github.com/facebookresearch/fastMRI/blob/main/fastmri/models/unet.py


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 33.513 seconds)


.. _sphx_glr_download_generated_autoexamples_GPU_example_fastMRI_UNet.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mind-inria/mri-nufft/gh-pages?urlpath=lab/tree/examples/generated/autoexamples/GPU/example_fastMRI_UNet.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_fastMRI_UNet.ipynb <example_fastMRI_UNet.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_fastMRI_UNet.py <example_fastMRI_UNet.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: example_fastMRI_UNet.zip <example_fastMRI_UNet.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
