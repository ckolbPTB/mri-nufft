
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/autoexamples/GPU/example_learn_samples.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_autoexamples_GPU_example_learn_samples.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_autoexamples_GPU_example_learn_samples.py:


======================
Learn Sampling pattern
======================

A small pytorch example to showcase learning k-space sampling patterns.
This example showcases the auto-diff capabilities of the NUFFT operator 
wrt to k-space trajectory in mri-nufft.

In this example, we solve the following optimization problem:

.. math::

    \mathbf{\hat{K}} =  \mathrm{arg} \min_{\mathbf{K}} ||  \mathcal{F}_\mathbf{K}^* D_\mathbf{K} \mathcal{F}_\mathbf{K} \mathbf{x} - \mathbf{x} ||_2^2
    
where :math:`\mathcal{F}_\mathbf{K}` is the forward NUFFT operator and :math:`D_\mathbf{K}` is the density compensators for trajectory :math:`\mathbf{K}`,  :math:`\mathbf{x}` is the MR image which is also the target image to be reconstructed.

.. warning::
    This example only showcases the autodiff capabilities, the learned sampling pattern is not scanner compliant as the scanner gradients required to implement it violate the hardware constraints. In practice, a projection :math:`\Pi_\mathcal{Q}(\mathbf{K})` into the scanner constraints set :math:`\mathcal{Q}` is recommended (see [Proj]_). This is implemented in the proprietary SPARKLING package [Sparks]_. Users are encouraged to contact the authors if they want to use it.

.. GENERATED FROM PYTHON SOURCE LINES 22-35

.. code-block:: Python

    import time
    import joblib

    import brainweb_dl as bwdl
    import matplotlib.pyplot as plt
    import numpy as np
    import torch
    from tqdm import tqdm
    from PIL import Image, ImageSequence

    from mrinufft import get_operator
    from mrinufft.trajectories import initialize_2D_radial








.. GENERATED FROM PYTHON SOURCE LINES 36-41

Setup a simple class to learn trajectory
----------------------------------------
.. note::
    While we are only learning the NUFFT operator, we still need the gradient ``wrt_data=True`` to be setup in ``get_operator`` to have all the gradients computed correctly.
    See [Projector]_ for more details.

.. GENERATED FROM PYTHON SOURCE LINES 41-70

.. code-block:: Python



    class Model(torch.nn.Module):
        def __init__(self, inital_trajectory):
            super(Model, self).__init__()
            self.trajectory = torch.nn.Parameter(
                data=torch.Tensor(inital_trajectory),
                requires_grad=True,
            )
            self.operator = get_operator("gpunufft", wrt_data=True, wrt_traj=True)(
                self.trajectory.detach().cpu().numpy(),
                shape=(256, 256),
                density=True,
                squeeze_dims=False,
            )

        def forward(self, x):
            # Update the trajectory in the NUFFT operator.
            # Note that the re-computation of density compensation happens internally.
            self.operator.samples = self.trajectory.clone()

            # A simple acquisition model simulated with a forward NUFFT operator
            kspace = self.operator.op(x)

            # A simple density compensated adjoint operator
            adjoint = self.operator.adj_op(kspace)
            return adjoint / torch.linalg.norm(adjoint)









.. GENERATED FROM PYTHON SOURCE LINES 71-73

Util function to plot the state of the model
--------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 73-96

.. code-block:: Python



    def plot_state(axs, mri_2D, traj, recon, loss=None, save_name=None):
        axs = axs.flatten()
        axs[0].imshow(np.abs(mri_2D[0]), cmap="gray")
        axs[0].axis("off")
        axs[0].set_title("MR Image")
        axs[1].scatter(*traj.T, s=1)
        axs[1].set_title("Trajectory")
        axs[2].imshow(np.abs(recon[0][0].detach().cpu().numpy()), cmap="gray")
        axs[2].axis("off")
        axs[2].set_title("Reconstruction")
        if loss is not None:
            axs[3].plot(loss)
            axs[3].set_title("Loss")
            axs[3].grid("on")
        if save_name is not None:
            plt.savefig(save_name, bbox_inches="tight")
            plt.close()
        else:
            plt.show()









.. GENERATED FROM PYTHON SOURCE LINES 97-99

Setup model and optimizer
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 99-106

.. code-block:: Python

    init_traj = initialize_2D_radial(16, 512).reshape(-1, 2).astype(np.float32)
    model = Model(init_traj)
    optimizer = torch.optim.Adam(model.parameters(), lr=1e-3)
    schedulder = torch.optim.lr_scheduler.LinearLR(
        optimizer, start_factor=1, end_factor=0.1, total_iters=100
    )








.. GENERATED FROM PYTHON SOURCE LINES 107-109

Setup data
----------

.. GENERATED FROM PYTHON SOURCE LINES 109-119

.. code-block:: Python


    mri_2D = torch.Tensor(np.flipud(bwdl.get_mri(4, "T1")[80, ...]).astype(np.complex64))[
        None
    ]
    mri_2D = mri_2D / torch.linalg.norm(mri_2D)
    model.eval()
    recon = model(mri_2D)
    fig, axs = plt.subplots(1, 3, figsize=(15, 5))
    plot_state(axs, mri_2D, init_traj, recon)




.. image-sg:: /generated/autoexamples/GPU/images/sphx_glr_example_learn_samples_001.png
   :alt: MR Image, Trajectory, Reconstruction
   :srcset: /generated/autoexamples/GPU/images/sphx_glr_example_learn_samples_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /volatile/github-ci-mind-inria/action-runner/_work/mri-nufft/mri-nufft/examples/GPU/example_learn_samples.py:110: UserWarning: Casting complex values to real discards the imaginary part (Triggered internally at ../aten/src/ATen/native/Copy.cpp:305.)
      mri_2D = torch.Tensor(np.flipud(bwdl.get_mri(4, "T1")[80, ...]).astype(np.complex64))[




.. GENERATED FROM PYTHON SOURCE LINES 120-122

Start training loop
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 122-168

.. code-block:: Python

    losses = []
    image_files = []
    model.train()
    with tqdm(range(100), unit="steps") as tqdms:
        for i in tqdms:
            out = model(mri_2D)
            loss = torch.norm(out - mri_2D[None])
            numpy_loss = loss.detach().cpu().numpy()
            tqdms.set_postfix({"loss": numpy_loss})
            losses.append(numpy_loss)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
            with torch.no_grad():
                # Clamp the value of trajectory between [-0.5, 0.5]
                for param in model.parameters():
                    param.clamp_(-0.5, 0.5)
            schedulder.step()
            # Generate images for gif
            hashed = joblib.hash((i, "learn_traj", time.time()))
            filename = "/tmp/" + f"{hashed}.png"
            fig, axs = plt.subplots(2, 2, figsize=(10, 10))
            plot_state(
                axs,
                mri_2D,
                model.trajectory.detach().cpu().numpy(),
                out,
                losses,
                save_name=filename,
            )
            image_files.append(filename)


    # Make a GIF of all images.
    imgs = [Image.open(img) for img in image_files]
    imgs[0].save(
        "mrinufft_learn_traj.gif",
        save_all=True,
        append_images=imgs[1:],
        optimize=False,
        duration=2,
        loop=0,
    )

    # sphinx_gallery_thumbnail_path = 'generated/autoexamples/GPU/images/mrinufft_learn_traj.gif'





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/100 [00:00<?, ?steps/s]      0%|          | 0/100 [00:00<?, ?steps/s, loss=0.29853097]      1%|          | 1/100 [00:00<01:00,  1.64steps/s, loss=0.29853097]      1%|          | 1/100 [00:00<01:00,  1.64steps/s, loss=0.3715369]       2%|▏         | 2/100 [00:01<01:04,  1.52steps/s, loss=0.3715369]      2%|▏         | 2/100 [00:01<01:04,  1.52steps/s, loss=0.32895607]      3%|▎         | 3/100 [00:01<01:02,  1.55steps/s, loss=0.32895607]      3%|▎         | 3/100 [00:01<01:02,  1.55steps/s, loss=0.27456304]      4%|▍         | 4/100 [00:02<01:01,  1.56steps/s, loss=0.27456304]      4%|▍         | 4/100 [00:02<01:01,  1.56steps/s, loss=0.28375643]      5%|▌         | 5/100 [00:03<01:07,  1.41steps/s, loss=0.28375643]      5%|▌         | 5/100 [00:03<01:07,  1.41steps/s, loss=0.2591521]       6%|▌         | 6/100 [00:04<01:03,  1.47steps/s, loss=0.2591521]      6%|▌         | 6/100 [00:04<01:03,  1.47steps/s, loss=0.25018638]      7%|▋         | 7/100 [00:04<01:05,  1.41steps/s, loss=0.25018638]      7%|▋         | 7/100 [00:04<01:05,  1.41steps/s, loss=0.2487974]       8%|▊         | 8/100 [00:05<01:04,  1.43steps/s, loss=0.2487974]      8%|▊         | 8/100 [00:05<01:04,  1.43steps/s, loss=0.23727986]      9%|▉         | 9/100 [00:06<01:00,  1.51steps/s, loss=0.23727986]      9%|▉         | 9/100 [00:06<01:00,  1.51steps/s, loss=0.23193963]     10%|█         | 10/100 [00:06<00:58,  1.53steps/s, loss=0.23193963]     10%|█         | 10/100 [00:06<00:58,  1.53steps/s, loss=0.22237168]     11%|█         | 11/100 [00:07<00:57,  1.56steps/s, loss=0.22237168]     11%|█         | 11/100 [00:07<00:57,  1.56steps/s, loss=0.21973042]     12%|█▏        | 12/100 [00:07<00:55,  1.57steps/s, loss=0.21973042]     12%|█▏        | 12/100 [00:08<00:55,  1.57steps/s, loss=0.21362427]     13%|█▎        | 13/100 [00:08<00:56,  1.54steps/s, loss=0.21362427]     13%|█▎        | 13/100 [00:08<00:56,  1.54steps/s, loss=0.20967829]     14%|█▍        | 14/100 [00:09<01:00,  1.42steps/s, loss=0.20967829]     14%|█▍        | 14/100 [00:09<01:00,  1.42steps/s, loss=0.20313123]     15%|█▌        | 15/100 [00:10<01:01,  1.38steps/s, loss=0.20313123]     15%|█▌        | 15/100 [00:10<01:01,  1.38steps/s, loss=0.19795403]     16%|█▌        | 16/100 [00:10<01:00,  1.38steps/s, loss=0.19795403]     16%|█▌        | 16/100 [00:11<01:00,  1.38steps/s, loss=0.19574313]     17%|█▋        | 17/100 [00:11<01:01,  1.36steps/s, loss=0.19574313]     17%|█▋        | 17/100 [00:11<01:01,  1.36steps/s, loss=0.19425128]     18%|█▊        | 18/100 [00:12<01:02,  1.31steps/s, loss=0.19425128]     18%|█▊        | 18/100 [00:12<01:02,  1.31steps/s, loss=0.18850486]     19%|█▉        | 19/100 [00:13<01:01,  1.32steps/s, loss=0.18850486]     19%|█▉        | 19/100 [00:13<01:01,  1.32steps/s, loss=0.18914378]     20%|██        | 20/100 [00:13<00:59,  1.35steps/s, loss=0.18914378]     20%|██        | 20/100 [00:14<00:59,  1.35steps/s, loss=0.18642937]     21%|██        | 21/100 [00:14<01:00,  1.31steps/s, loss=0.18642937]     21%|██        | 21/100 [00:14<01:00,  1.31steps/s, loss=0.18145475]     22%|██▏       | 22/100 [00:15<01:05,  1.20steps/s, loss=0.18145475]     22%|██▏       | 22/100 [00:15<01:05,  1.20steps/s, loss=0.18390268]     23%|██▎       | 23/100 [00:16<01:02,  1.23steps/s, loss=0.18390268]     23%|██▎       | 23/100 [00:16<01:02,  1.23steps/s, loss=0.17820892]     24%|██▍       | 24/100 [00:17<01:00,  1.26steps/s, loss=0.17820892]     24%|██▍       | 24/100 [00:17<01:00,  1.26steps/s, loss=0.1839515]      25%|██▌       | 25/100 [00:18<00:57,  1.30steps/s, loss=0.1839515]     25%|██▌       | 25/100 [00:18<00:57,  1.30steps/s, loss=0.17685483]     26%|██▌       | 26/100 [00:18<00:58,  1.27steps/s, loss=0.17685483]     26%|██▌       | 26/100 [00:18<00:58,  1.27steps/s, loss=0.17921717]     27%|██▋       | 27/100 [00:19<00:56,  1.29steps/s, loss=0.17921717]     27%|██▋       | 27/100 [00:19<00:56,  1.29steps/s, loss=0.17851625]     28%|██▊       | 28/100 [00:20<00:55,  1.29steps/s, loss=0.17851625]     28%|██▊       | 28/100 [00:20<00:55,  1.29steps/s, loss=0.17058375]     29%|██▉       | 29/100 [00:21<00:54,  1.30steps/s, loss=0.17058375]     29%|██▉       | 29/100 [00:21<00:54,  1.30steps/s, loss=0.17509796]     30%|███       | 30/100 [00:21<00:53,  1.30steps/s, loss=0.17509796]     30%|███       | 30/100 [00:21<00:53,  1.30steps/s, loss=0.17262301]     31%|███       | 31/100 [00:23<01:01,  1.12steps/s, loss=0.17262301]     31%|███       | 31/100 [00:23<01:01,  1.12steps/s, loss=0.17671409]     32%|███▏      | 32/100 [00:23<00:57,  1.17steps/s, loss=0.17671409]     32%|███▏      | 32/100 [00:23<00:57,  1.17steps/s, loss=0.17606626]     33%|███▎      | 33/100 [00:24<00:55,  1.21steps/s, loss=0.17606626]     33%|███▎      | 33/100 [00:24<00:55,  1.21steps/s, loss=0.17258722]     34%|███▍      | 34/100 [00:25<00:52,  1.25steps/s, loss=0.17258722]     34%|███▍      | 34/100 [00:25<00:52,  1.25steps/s, loss=0.17479756]     35%|███▌      | 35/100 [00:26<00:51,  1.27steps/s, loss=0.17479756]     35%|███▌      | 35/100 [00:26<00:51,  1.27steps/s, loss=0.18024807]     36%|███▌      | 36/100 [00:26<00:49,  1.29steps/s, loss=0.18024807]     36%|███▌      | 36/100 [00:26<00:49,  1.29steps/s, loss=0.16743463]     37%|███▋      | 37/100 [00:27<00:48,  1.30steps/s, loss=0.16743463]     37%|███▋      | 37/100 [00:27<00:48,  1.30steps/s, loss=0.17912379]     38%|███▊      | 38/100 [00:28<00:47,  1.32steps/s, loss=0.17912379]     38%|███▊      | 38/100 [00:28<00:47,  1.32steps/s, loss=0.16701101]     39%|███▉      | 39/100 [00:29<00:56,  1.07steps/s, loss=0.16701101]     39%|███▉      | 39/100 [00:29<00:56,  1.07steps/s, loss=0.16491835]     40%|████      | 40/100 [00:30<00:49,  1.21steps/s, loss=0.16491835]     40%|████      | 40/100 [00:30<00:49,  1.21steps/s, loss=0.1682617]      41%|████      | 41/100 [00:30<00:46,  1.28steps/s, loss=0.1682617]     41%|████      | 41/100 [00:30<00:46,  1.28steps/s, loss=0.16329034]     42%|████▏     | 42/100 [00:31<00:43,  1.33steps/s, loss=0.16329034]     42%|████▏     | 42/100 [00:31<00:43,  1.33steps/s, loss=0.16175108]     43%|████▎     | 43/100 [00:32<00:41,  1.37steps/s, loss=0.16175108]     43%|████▎     | 43/100 [00:32<00:41,  1.37steps/s, loss=0.16299683]     44%|████▍     | 44/100 [00:33<00:41,  1.36steps/s, loss=0.16299683]     44%|████▍     | 44/100 [00:33<00:41,  1.36steps/s, loss=0.1630187]      45%|████▌     | 45/100 [00:33<00:39,  1.39steps/s, loss=0.1630187]     45%|████▌     | 45/100 [00:33<00:39,  1.39steps/s, loss=0.16471118]     46%|████▌     | 46/100 [00:34<00:37,  1.42steps/s, loss=0.16471118]     46%|████▌     | 46/100 [00:34<00:37,  1.42steps/s, loss=0.16677435]     47%|████▋     | 47/100 [00:35<00:37,  1.42steps/s, loss=0.16677435]     47%|████▋     | 47/100 [00:35<00:37,  1.42steps/s, loss=0.16901784]     48%|████▊     | 48/100 [00:36<00:40,  1.30steps/s, loss=0.16901784]     48%|████▊     | 48/100 [00:36<00:40,  1.30steps/s, loss=0.16728026]     49%|████▉     | 49/100 [00:36<00:38,  1.33steps/s, loss=0.16728026]     49%|████▉     | 49/100 [00:36<00:38,  1.33steps/s, loss=0.1540741]      50%|█████     | 50/100 [00:37<00:39,  1.27steps/s, loss=0.1540741]     50%|█████     | 50/100 [00:37<00:39,  1.27steps/s, loss=0.15894961]     51%|█████     | 51/100 [00:38<00:37,  1.31steps/s, loss=0.15894961]     51%|█████     | 51/100 [00:38<00:37,  1.31steps/s, loss=0.15846582]     52%|█████▏    | 52/100 [00:38<00:35,  1.36steps/s, loss=0.15846582]     52%|█████▏    | 52/100 [00:38<00:35,  1.36steps/s, loss=0.15148008]     53%|█████▎    | 53/100 [00:39<00:33,  1.38steps/s, loss=0.15148008]     53%|█████▎    | 53/100 [00:39<00:33,  1.38steps/s, loss=0.15278645]     54%|█████▍    | 54/100 [00:40<00:32,  1.40steps/s, loss=0.15278645]     54%|█████▍    | 54/100 [00:40<00:32,  1.40steps/s, loss=0.15481398]     55%|█████▌    | 55/100 [00:40<00:30,  1.45steps/s, loss=0.15481398]     55%|█████▌    | 55/100 [00:41<00:30,  1.45steps/s, loss=0.15214367]     56%|█████▌    | 56/100 [00:41<00:29,  1.48steps/s, loss=0.15214367]     56%|█████▌    | 56/100 [00:41<00:29,  1.48steps/s, loss=0.15160738]     57%|█████▋    | 57/100 [00:42<00:31,  1.35steps/s, loss=0.15160738]     57%|█████▋    | 57/100 [00:42<00:31,  1.35steps/s, loss=0.14916064]     58%|█████▊    | 58/100 [00:43<00:30,  1.39steps/s, loss=0.14916064]     58%|█████▊    | 58/100 [00:43<00:30,  1.39steps/s, loss=0.1519764]      59%|█████▉    | 59/100 [00:43<00:28,  1.46steps/s, loss=0.1519764]     59%|█████▉    | 59/100 [00:43<00:28,  1.46steps/s, loss=0.14940931]     60%|██████    | 60/100 [00:44<00:26,  1.50steps/s, loss=0.14940931]     60%|██████    | 60/100 [00:44<00:26,  1.50steps/s, loss=0.14769515]     61%|██████    | 61/100 [00:45<00:25,  1.53steps/s, loss=0.14769515]     61%|██████    | 61/100 [00:45<00:25,  1.53steps/s, loss=0.1486821]      62%|██████▏   | 62/100 [00:45<00:24,  1.55steps/s, loss=0.1486821]     62%|██████▏   | 62/100 [00:45<00:24,  1.55steps/s, loss=0.1491536]     63%|██████▎   | 63/100 [00:46<00:23,  1.57steps/s, loss=0.1491536]     63%|██████▎   | 63/100 [00:46<00:23,  1.57steps/s, loss=0.14618717]     64%|██████▍   | 64/100 [00:46<00:23,  1.55steps/s, loss=0.14618717]     64%|██████▍   | 64/100 [00:46<00:23,  1.55steps/s, loss=0.14936966]     65%|██████▌   | 65/100 [00:47<00:22,  1.55steps/s, loss=0.14936966]     65%|██████▌   | 65/100 [00:47<00:22,  1.55steps/s, loss=0.15209694]     66%|██████▌   | 66/100 [00:48<00:24,  1.40steps/s, loss=0.15209694]     66%|██████▌   | 66/100 [00:48<00:24,  1.40steps/s, loss=0.14948468]     67%|██████▋   | 67/100 [00:49<00:22,  1.45steps/s, loss=0.14948468]     67%|██████▋   | 67/100 [00:49<00:22,  1.45steps/s, loss=0.14717774]     68%|██████▊   | 68/100 [00:49<00:21,  1.49steps/s, loss=0.14717774]     68%|██████▊   | 68/100 [00:49<00:21,  1.49steps/s, loss=0.144896]       69%|██████▉   | 69/100 [00:50<00:20,  1.51steps/s, loss=0.144896]     69%|██████▉   | 69/100 [00:50<00:20,  1.51steps/s, loss=0.14506505]     70%|███████   | 70/100 [00:51<00:19,  1.53steps/s, loss=0.14506505]     70%|███████   | 70/100 [00:51<00:19,  1.53steps/s, loss=0.14677292]     71%|███████   | 71/100 [00:51<00:18,  1.54steps/s, loss=0.14677292]     71%|███████   | 71/100 [00:51<00:18,  1.54steps/s, loss=0.14703779]     72%|███████▏  | 72/100 [00:52<00:18,  1.48steps/s, loss=0.14703779]     72%|███████▏  | 72/100 [00:52<00:18,  1.48steps/s, loss=0.14472757]     73%|███████▎  | 73/100 [00:53<00:17,  1.50steps/s, loss=0.14472757]     73%|███████▎  | 73/100 [00:53<00:17,  1.50steps/s, loss=0.14384648]     74%|███████▍  | 74/100 [00:53<00:18,  1.38steps/s, loss=0.14384648]     74%|███████▍  | 74/100 [00:53<00:18,  1.38steps/s, loss=0.14463118]     75%|███████▌  | 75/100 [00:54<00:17,  1.43steps/s, loss=0.14463118]     75%|███████▌  | 75/100 [00:54<00:17,  1.43steps/s, loss=0.14406866]     76%|███████▌  | 76/100 [00:55<00:16,  1.49steps/s, loss=0.14406866]     76%|███████▌  | 76/100 [00:55<00:16,  1.49steps/s, loss=0.14938952]     77%|███████▋  | 77/100 [00:55<00:15,  1.53steps/s, loss=0.14938952]     77%|███████▋  | 77/100 [00:55<00:15,  1.53steps/s, loss=0.15387076]     78%|███████▊  | 78/100 [00:56<00:13,  1.58steps/s, loss=0.15387076]     78%|███████▊  | 78/100 [00:56<00:13,  1.58steps/s, loss=0.15300994]     79%|███████▉  | 79/100 [00:56<00:13,  1.60steps/s, loss=0.15300994]     79%|███████▉  | 79/100 [00:56<00:13,  1.60steps/s, loss=0.14953594]     80%|████████  | 80/100 [00:57<00:12,  1.62steps/s, loss=0.14953594]     80%|████████  | 80/100 [00:57<00:12,  1.62steps/s, loss=0.15011436]     81%|████████  | 81/100 [00:58<00:11,  1.65steps/s, loss=0.15011436]     81%|████████  | 81/100 [00:58<00:11,  1.65steps/s, loss=0.14719436]     82%|████████▏ | 82/100 [00:58<00:10,  1.65steps/s, loss=0.14719436]     82%|████████▏ | 82/100 [00:58<00:10,  1.65steps/s, loss=0.14236908]     83%|████████▎ | 83/100 [00:59<00:11,  1.44steps/s, loss=0.14236908]     83%|████████▎ | 83/100 [00:59<00:11,  1.44steps/s, loss=0.14151089]     84%|████████▍ | 84/100 [01:00<00:10,  1.47steps/s, loss=0.14151089]     84%|████████▍ | 84/100 [01:00<00:10,  1.47steps/s, loss=0.1438068]      85%|████████▌ | 85/100 [01:00<00:09,  1.50steps/s, loss=0.1438068]     85%|████████▌ | 85/100 [01:00<00:09,  1.50steps/s, loss=0.14227015]     86%|████████▌ | 86/100 [01:01<00:09,  1.51steps/s, loss=0.14227015]     86%|████████▌ | 86/100 [01:01<00:09,  1.51steps/s, loss=0.14016308]     87%|████████▋ | 87/100 [01:02<00:08,  1.55steps/s, loss=0.14016308]     87%|████████▋ | 87/100 [01:02<00:08,  1.55steps/s, loss=0.13989109]     88%|████████▊ | 88/100 [01:02<00:07,  1.59steps/s, loss=0.13989109]     88%|████████▊ | 88/100 [01:02<00:07,  1.59steps/s, loss=0.14096463]     89%|████████▉ | 89/100 [01:03<00:07,  1.57steps/s, loss=0.14096463]     89%|████████▉ | 89/100 [01:03<00:07,  1.57steps/s, loss=0.13986298]     90%|█████████ | 90/100 [01:04<00:06,  1.59steps/s, loss=0.13986298]     90%|█████████ | 90/100 [01:04<00:06,  1.59steps/s, loss=0.13826616]     91%|█████████ | 91/100 [01:04<00:05,  1.59steps/s, loss=0.13826616]     91%|█████████ | 91/100 [01:04<00:05,  1.59steps/s, loss=0.13736235]     92%|█████████▏| 92/100 [01:05<00:05,  1.38steps/s, loss=0.13736235]     92%|█████████▏| 92/100 [01:05<00:05,  1.38steps/s, loss=0.1367451]      93%|█████████▎| 93/100 [01:06<00:04,  1.45steps/s, loss=0.1367451]     93%|█████████▎| 93/100 [01:06<00:04,  1.45steps/s, loss=0.13565607]     94%|█████████▍| 94/100 [01:06<00:03,  1.52steps/s, loss=0.13565607]     94%|█████████▍| 94/100 [01:06<00:03,  1.52steps/s, loss=0.13591993]     95%|█████████▌| 95/100 [01:07<00:03,  1.52steps/s, loss=0.13591993]     95%|█████████▌| 95/100 [01:07<00:03,  1.52steps/s, loss=0.13773386]     96%|█████████▌| 96/100 [01:08<00:02,  1.55steps/s, loss=0.13773386]     96%|█████████▌| 96/100 [01:08<00:02,  1.55steps/s, loss=0.135792]       97%|█████████▋| 97/100 [01:08<00:01,  1.58steps/s, loss=0.135792]     97%|█████████▋| 97/100 [01:08<00:01,  1.58steps/s, loss=0.13559215]     98%|█████████▊| 98/100 [01:09<00:01,  1.58steps/s, loss=0.13559215]     98%|█████████▊| 98/100 [01:09<00:01,  1.58steps/s, loss=0.13489719]     99%|█████████▉| 99/100 [01:09<00:00,  1.59steps/s, loss=0.13489719]     99%|█████████▉| 99/100 [01:09<00:00,  1.59steps/s, loss=0.13364582]    100%|██████████| 100/100 [01:10<00:00,  1.60steps/s, loss=0.13364582]    100%|██████████| 100/100 [01:10<00:00,  1.42steps/s, loss=0.13364582]




.. GENERATED FROM PYTHON SOURCE LINES 195-199

.. image-sg:: /generated/autoexamples/GPU/images/mrinufft_learn_traj.gif
   :alt: example learn_samples
   :srcset: /generated/autoexamples/GPU/images/mrinufft_learn_traj.gif
   :class: sphx-glr-single-img

.. GENERATED FROM PYTHON SOURCE LINES 201-203

Trained trajectory
------------------

.. GENERATED FROM PYTHON SOURCE LINES 203-209

.. code-block:: Python

    model.eval()
    recon = model(mri_2D)
    fig, axs = plt.subplots(2, 2, figsize=(10, 10))
    plot_state(axs, mri_2D, model.trajectory.detach().cpu().numpy(), recon, losses)
    plt.show()




.. image-sg:: /generated/autoexamples/GPU/images/sphx_glr_example_learn_samples_002.png
   :alt: MR Image, Trajectory, Reconstruction, Loss
   :srcset: /generated/autoexamples/GPU/images/sphx_glr_example_learn_samples_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 210-225

References
==========

.. [Proj] N. Chauffert, P. Weiss, J. Kahn and P. Ciuciu, "A Projection Algorithm for
          Gradient Waveforms Design in Magnetic Resonance Imaging," in
          IEEE Transactions on Medical Imaging, vol. 35, no. 9, pp. 2026-2039, Sept. 2016,
          doi: 10.1109/TMI.2016.2544251.
.. [Sparks] Chaithya GR, P. Weiss, G. Daval-Frérot, A. Massire, A. Vignaud and P. Ciuciu,
          "Optimizing Full 3D SPARKLING Trajectories for High-Resolution Magnetic
          Resonance Imaging," in IEEE Transactions on Medical Imaging, vol. 41, no. 8,
          pp. 2105-2117, Aug. 2022, doi: 10.1109/TMI.2022.3157269.
.. [Projector] Chaithya GR, and Philippe Ciuciu. 2023. "Jointly Learning Non-Cartesian
          k-Space Trajectories and Reconstruction Networks for 2D and 3D MR Imaging
          through Projection" Bioengineering 10, no. 2: 158.
          https://doi.org/10.3390/bioengineering10020158


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 17.298 seconds)


.. _sphx_glr_download_generated_autoexamples_GPU_example_learn_samples.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mind-inria/mri-nufft/gh-pages?urlpath=lab/tree/examples/generated/autoexamples/GPU/example_learn_samples.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_learn_samples.ipynb <example_learn_samples.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_learn_samples.py <example_learn_samples.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: example_learn_samples.zip <example_learn_samples.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
