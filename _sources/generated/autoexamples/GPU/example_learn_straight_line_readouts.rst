
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/autoexamples/GPU/example_learn_straight_line_readouts.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_autoexamples_GPU_example_learn_straight_line_readouts.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_autoexamples_GPU_example_learn_straight_line_readouts.py:


===================================
Learn Straight line readout pattern
===================================

A small pytorch example to showcase learning k-space sampling patterns.
In this example we learn the 2D sampling pattern for a 3D MRI image, assuming
straight line readouts. This example showcases the auto-diff capabilities of the NUFFT operator
The image resolution is kept small to reduce computation time.

.. warning::
    This example only showcases the autodiff capabilities, the learned sampling pattern is not scanner compliant as the scanner gradients required to implement it violate the hardware constraints. In practice, a projection :math:`\Pi_\mathcal{Q}(\mathbf{K})` into the scanner constraints set :math:`\mathcal{Q}` is recommended (see [Proj]_). This is implemented in the proprietary SPARKLING package [Sparks]_. Users are encouraged to contact the authors if they want to use it.

.. GENERATED FROM PYTHON SOURCE LINES 17-21

.. colab-link::
   :needs_gpu: 1

   !pip install mri-nufft[gpunufft]

.. GENERATED FROM PYTHON SOURCE LINES 24-26

Imports
-------

.. GENERATED FROM PYTHON SOURCE LINES 26-39

.. code-block:: Python

    import time
    import joblib

    import brainweb_dl as bwdl
    import matplotlib.pyplot as plt
    import numpy as np
    import torch
    from tqdm import tqdm
    from PIL import Image, ImageSequence

    from mrinufft import get_operator









.. GENERATED FROM PYTHON SOURCE LINES 40-45

Setup a simple class to learn trajectory
----------------------------------------
.. note::
    While we are only learning the NUFFT operator, we still need the gradient `wrt_data=True` to have all the gradients computed correctly.
    See [Projector]_ for more details.

.. GENERATED FROM PYTHON SOURCE LINES 45-115

.. code-block:: Python



    class Model(torch.nn.Module):
        def __init__(self, num_shots, img_size, factor_cartesian=0.3):
            super(Model, self).__init__()
            self.num_samples_per_shot = 128
            cart_del = 1 / img_size[0]
            num_cart_points = np.round(np.sqrt(factor_cartesian * num_shots)).astype(int)
            edge_center = cart_del * num_cart_points / 2

            self.central_points = torch.nn.Parameter(
                data=torch.stack(
                    torch.meshgrid(
                        torch.linspace(-edge_center, edge_center, num_cart_points),
                        torch.linspace(-edge_center, edge_center, num_cart_points),
                        indexing="ij",
                    ),
                    axis=-1,
                ).reshape(-1, 2),
                requires_grad=False,
            )
            self.non_center_points = torch.nn.Parameter(
                data=torch.Tensor(
                    np.random.random((num_shots - self.central_points.shape[0], 2)) - 0.5
                ),
                requires_grad=True,
            )
            self.operator = get_operator("gpunufft", wrt_data=True, wrt_traj=True)(
                np.random.random(
                    (self.get_2D_points().shape[0] * self.num_samples_per_shot, 3)
                )
                - 0.5,
                shape=img_size,
                density=True,
                squeeze_dims=False,
            )

        def get_trajectory(self, get_as_shot=False):
            samples = self._get_3D_points(self.get_2D_points())
            if not get_as_shot:
                return samples
            return samples.reshape(-1, self.num_samples_per_shot, 3)

        def get_2D_points(self):
            return torch.vstack([self.central_points, self.non_center_points])

        def _get_3D_points(self, samples2D):
            line = torch.linspace(
                -0.5,
                0.5,
                self.num_samples_per_shot,
                device=samples2D.device,
                dtype=samples2D.dtype,
            )
            return torch.stack(
                [
                    line.repeat(samples2D.shape[0], 1),
                    samples2D[:, 0].repeat(self.num_samples_per_shot, 1).T,
                    samples2D[:, 1].repeat(self.num_samples_per_shot, 1).T,
                ],
                dim=-1,
            ).reshape(-1, 3)

        def forward(self, x):
            self.operator.samples = self.get_trajectory()
            kspace = self.operator.op(x)
            adjoint = self.operator.adj_op(kspace).abs()
            return adjoint / torch.mean(adjoint)









.. GENERATED FROM PYTHON SOURCE LINES 116-118

Util function to plot the state of the model
--------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 118-163

.. code-block:: Python



    def plot_state(mri_2D, traj, recon, loss=None, save_name=None, i=None):
        fig_grid = (2, 2)
        if loss is None:
            fig_grid = (1, 3)
        fig, axs = plt.subplots(*fig_grid, figsize=tuple(i * 5 for i in fig_grid[::-1]))
        axs = axs.flatten()
        axs[0].imshow(np.abs(mri_2D[0][..., 11]), cmap="gray")
        axs[0].axis("off")
        axs[0].set_title("MR Image")
        if traj.shape[-1] == 3:
            if i is not None and i > 50:
                axs[1].scatter(*traj.T[1:3, 0], s=10, color="blue")
            else:
                fig_kwargs = {}
                plt_kwargs = {"s": 1, "alpha": 0.2}
                if i is not None:
                    fig_kwargs["azim"], fig_kwargs["elev"] = (
                        i / 50 * 60 - 60,
                        30 - i / 50 * 30,
                    )
                    plt_kwargs["alpha"] = 0.2 + 0.8 * i / 50
                    plt_kwargs["s"] = 1 + 9 * i / 50
                axs[1].remove()
                axs[1] = fig.add_subplot(*fig_grid, 2, projection="3d", **fig_kwargs)
                for shot in traj:
                    axs[1].scatter(*shot.T, color="blue", **plt_kwargs)
        else:
            axs[1].scatter(*traj.T, s=10)
        axs[1].set_title("Trajectory")
        axs[2].imshow(np.abs(recon[0][0][..., 11].detach().cpu().numpy()), cmap="gray")
        axs[2].axis("off")
        axs[2].set_title("Reconstruction")
        if loss is not None:
            axs[3].plot(loss)
            axs[3].grid("on")
            axs[3].set_title("Loss")
        if save_name is not None:
            plt.savefig(save_name, bbox_inches="tight")
            plt.close()
        else:
            plt.show()









.. GENERATED FROM PYTHON SOURCE LINES 164-166

Setup model and optimizer
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-170

.. code-block:: Python


    cart_data = np.flipud(bwdl.get_mri(4, "T1")).T[::8, ::8, ::8].astype(np.complex64)
    model = Model(253, cart_data.shape)
    optimizer = torch.optim.Adam(model.parameters(), lr=1e-2)







.. GENERATED FROM PYTHON SOURCE LINES 171-173

Setup data
----------

.. GENERATED FROM PYTHON SOURCE LINES 173-179

.. code-block:: Python


    mri_3D = torch.Tensor(cart_data)[None]
    mri_3D = mri_3D / torch.mean(mri_3D)
    model.eval()
    recon = model(mri_3D)
    plot_state(mri_3D, model.get_trajectory(True).detach().cpu().numpy(), recon)



.. image-sg:: /generated/autoexamples/GPU/images/sphx_glr_example_learn_straight_line_readouts_001.png
   :alt: MR Image, Reconstruction, Trajectory
   :srcset: /generated/autoexamples/GPU/images/sphx_glr_example_learn_straight_line_readouts_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /volatile/github-ci-mind-inria/gpu_runner/_work/mri-nufft/mri-nufft/examples/GPU/example_learn_straight_line_readouts.py:174: UserWarning: Casting complex values to real discards the imaginary part (Triggered internally at ../aten/src/ATen/native/Copy.cpp:308.)
      mri_3D = torch.Tensor(cart_data)[None]




.. GENERATED FROM PYTHON SOURCE LINES 180-182

Start training loop
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 182-225

.. code-block:: Python

    losses = []
    image_files = []
    model.train()
    with tqdm(range(100), unit="steps") as tqdms:
        for i in tqdms:
            out = model(mri_3D)
            loss = torch.nn.functional.mse_loss(out, mri_3D[None])
            numpy_loss = loss.detach().cpu().numpy()
            tqdms.set_postfix({"loss": numpy_loss})
            losses.append(numpy_loss)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
            with torch.no_grad():
                # Clamp the value of trajectory between [-0.5, 0.5]
                for param in model.parameters():
                    param.clamp_(-0.5, 0.5)
            # Generate images for gif
            hashed = joblib.hash((i, "learn_line", time.time()))
            filename = "/tmp/" + f"{hashed}.png"
            plot_state(
                mri_3D,
                model.get_trajectory(True).detach().cpu().numpy(),
                out,
                losses,
                save_name=filename,
                i=i,
            )
            image_files.append(filename)

    # Make a GIF of all images.
    imgs = [Image.open(img) for img in image_files]
    imgs[0].save(
        "mrinufft_learn_2d_sampling_pattern.gif",
        save_all=True,
        append_images=imgs[1:],
        optimize=False,
        duration=2,
        loop=0,
    )

    # sphinx_gallery_thumbnail_path = 'generated/autoexamples/GPU/images/mrinufft_learn_2d_sampling_pattern.gif'





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/100 [00:00<?, ?steps/s]      0%|          | 0/100 [00:00<?, ?steps/s, loss=0.34341472]      1%|          | 1/100 [00:04<06:47,  4.12s/steps, loss=0.34341472]      1%|          | 1/100 [00:04<06:47,  4.12s/steps, loss=0.31155446]      2%|▏         | 2/100 [00:07<06:25,  3.93s/steps, loss=0.31155446]      2%|▏         | 2/100 [00:08<06:25,  3.93s/steps, loss=0.3009098]       3%|▎         | 3/100 [00:11<06:02,  3.74s/steps, loss=0.3009098]      3%|▎         | 3/100 [00:11<06:02,  3.74s/steps, loss=0.284733]       4%|▍         | 4/100 [00:15<06:11,  3.87s/steps, loss=0.284733]      4%|▍         | 4/100 [00:15<06:11,  3.87s/steps, loss=0.26770726]      5%|▌         | 5/100 [00:19<06:06,  3.86s/steps, loss=0.26770726]      5%|▌         | 5/100 [00:19<06:06,  3.86s/steps, loss=0.27591684]      6%|▌         | 6/100 [00:22<05:48,  3.71s/steps, loss=0.27591684]      6%|▌         | 6/100 [00:22<05:48,  3.71s/steps, loss=0.27516845]      7%|▋         | 7/100 [00:26<05:47,  3.74s/steps, loss=0.27516845]      7%|▋         | 7/100 [00:26<05:47,  3.74s/steps, loss=0.2661701]       8%|▊         | 8/100 [00:30<05:48,  3.78s/steps, loss=0.2661701]      8%|▊         | 8/100 [00:30<05:48,  3.78s/steps, loss=0.2670026]      9%|▉         | 9/100 [00:34<05:57,  3.93s/steps, loss=0.2670026]      9%|▉         | 9/100 [00:34<05:57,  3.93s/steps, loss=0.26455602]     10%|█         | 10/100 [00:38<05:45,  3.84s/steps, loss=0.26455602]     10%|█         | 10/100 [00:38<05:45,  3.84s/steps, loss=0.25266194]     11%|█         | 11/100 [00:41<05:35,  3.77s/steps, loss=0.25266194]     11%|█         | 11/100 [00:42<05:35,  3.77s/steps, loss=0.25401232]     12%|█▏        | 12/100 [00:46<05:49,  3.98s/steps, loss=0.25401232]     12%|█▏        | 12/100 [00:46<05:49,  3.98s/steps, loss=0.2469367]      13%|█▎        | 13/100 [00:50<05:44,  3.95s/steps, loss=0.2469367]     13%|█▎        | 13/100 [00:50<05:44,  3.95s/steps, loss=0.2503767]     14%|█▍        | 14/100 [00:53<05:24,  3.77s/steps, loss=0.2503767]     14%|█▍        | 14/100 [00:53<05:24,  3.77s/steps, loss=0.2503972]     15%|█▌        | 15/100 [00:57<05:21,  3.78s/steps, loss=0.2503972]     15%|█▌        | 15/100 [00:57<05:21,  3.78s/steps, loss=0.24450235]     16%|█▌        | 16/100 [01:01<05:23,  3.85s/steps, loss=0.24450235]     16%|█▌        | 16/100 [01:01<05:23,  3.85s/steps, loss=0.24211927]     17%|█▋        | 17/100 [01:05<05:17,  3.82s/steps, loss=0.24211927]     17%|█▋        | 17/100 [01:05<05:17,  3.82s/steps, loss=0.23848143]     18%|█▊        | 18/100 [01:09<05:13,  3.83s/steps, loss=0.23848143]     18%|█▊        | 18/100 [01:09<05:13,  3.83s/steps, loss=0.2333746]      19%|█▉        | 19/100 [01:12<05:11,  3.85s/steps, loss=0.2333746]     19%|█▉        | 19/100 [01:13<05:11,  3.85s/steps, loss=0.2378125]     20%|██        | 20/100 [01:16<05:03,  3.79s/steps, loss=0.2378125]     20%|██        | 20/100 [01:16<05:03,  3.79s/steps, loss=0.23661344]     21%|██        | 21/100 [01:20<04:53,  3.71s/steps, loss=0.23661344]     21%|██        | 21/100 [01:20<04:53,  3.71s/steps, loss=0.23178451]     22%|██▏       | 22/100 [01:23<04:52,  3.75s/steps, loss=0.23178451]     22%|██▏       | 22/100 [01:24<04:52,  3.75s/steps, loss=0.23097122]     23%|██▎       | 23/100 [01:27<04:48,  3.74s/steps, loss=0.23097122]     23%|██▎       | 23/100 [01:27<04:48,  3.74s/steps, loss=0.23395818]     24%|██▍       | 24/100 [01:31<04:44,  3.74s/steps, loss=0.23395818]     24%|██▍       | 24/100 [01:31<04:44,  3.74s/steps, loss=0.23553324]     25%|██▌       | 25/100 [01:35<04:37,  3.71s/steps, loss=0.23553324]     25%|██▌       | 25/100 [01:35<04:37,  3.71s/steps, loss=0.2444934]      26%|██▌       | 26/100 [01:39<04:43,  3.82s/steps, loss=0.2444934]     26%|██▌       | 26/100 [01:39<04:43,  3.82s/steps, loss=0.24346648]     27%|██▋       | 27/100 [01:42<04:33,  3.74s/steps, loss=0.24346648]     27%|██▋       | 27/100 [01:42<04:33,  3.74s/steps, loss=0.23721527]     28%|██▊       | 28/100 [01:46<04:23,  3.67s/steps, loss=0.23721527]     28%|██▊       | 28/100 [01:46<04:23,  3.67s/steps, loss=0.23485874]     29%|██▉       | 29/100 [01:50<04:24,  3.72s/steps, loss=0.23485874]     29%|██▉       | 29/100 [01:50<04:24,  3.72s/steps, loss=0.23476441]     30%|███       | 30/100 [01:53<04:13,  3.62s/steps, loss=0.23476441]     30%|███       | 30/100 [01:53<04:13,  3.62s/steps, loss=0.2305143]      31%|███       | 31/100 [01:57<04:09,  3.61s/steps, loss=0.2305143]     31%|███       | 31/100 [01:57<04:09,  3.61s/steps, loss=0.23571879]     32%|███▏      | 32/100 [02:00<04:12,  3.72s/steps, loss=0.23571879]     32%|███▏      | 32/100 [02:01<04:12,  3.72s/steps, loss=0.23084943]     33%|███▎      | 33/100 [02:04<04:08,  3.71s/steps, loss=0.23084943]     33%|███▎      | 33/100 [02:04<04:08,  3.71s/steps, loss=0.23198651]     34%|███▍      | 34/100 [02:08<04:03,  3.70s/steps, loss=0.23198651]     34%|███▍      | 34/100 [02:08<04:03,  3.70s/steps, loss=0.22995368]     35%|███▌      | 35/100 [02:11<03:53,  3.60s/steps, loss=0.22995368]     35%|███▌      | 35/100 [02:11<03:53,  3.60s/steps, loss=0.22892326]     36%|███▌      | 36/100 [02:14<03:42,  3.47s/steps, loss=0.22892326]     36%|███▌      | 36/100 [02:14<03:42,  3.47s/steps, loss=0.23109329]     37%|███▋      | 37/100 [02:18<03:41,  3.52s/steps, loss=0.23109329]     37%|███▋      | 37/100 [02:18<03:41,  3.52s/steps, loss=0.23356777]     38%|███▊      | 38/100 [02:21<03:35,  3.47s/steps, loss=0.23356777]     38%|███▊      | 38/100 [02:21<03:35,  3.47s/steps, loss=0.23130943]     39%|███▉      | 39/100 [02:25<03:38,  3.58s/steps, loss=0.23130943]     39%|███▉      | 39/100 [02:25<03:38,  3.58s/steps, loss=0.23515436]     40%|████      | 40/100 [02:29<03:40,  3.67s/steps, loss=0.23515436]     40%|████      | 40/100 [02:29<03:40,  3.67s/steps, loss=0.23081614]     41%|████      | 41/100 [02:34<03:58,  4.04s/steps, loss=0.23081614]     41%|████      | 41/100 [02:34<03:58,  4.04s/steps, loss=0.22892135]     42%|████▏     | 42/100 [02:38<03:51,  3.99s/steps, loss=0.22892135]     42%|████▏     | 42/100 [02:38<03:51,  3.99s/steps, loss=0.227259]       43%|████▎     | 43/100 [02:42<03:46,  3.97s/steps, loss=0.227259]     43%|████▎     | 43/100 [02:42<03:46,  3.97s/steps, loss=0.2288105]     44%|████▍     | 44/100 [02:45<03:26,  3.69s/steps, loss=0.2288105]     44%|████▍     | 44/100 [02:45<03:26,  3.69s/steps, loss=0.22528775]     45%|████▌     | 45/100 [02:48<03:16,  3.58s/steps, loss=0.22528775]     45%|████▌     | 45/100 [02:48<03:16,  3.58s/steps, loss=0.22111806]     46%|████▌     | 46/100 [02:51<03:04,  3.43s/steps, loss=0.22111806]     46%|████▌     | 46/100 [02:51<03:04,  3.43s/steps, loss=0.22017398]     47%|████▋     | 47/100 [02:54<02:56,  3.32s/steps, loss=0.22017398]     47%|████▋     | 47/100 [02:54<02:56,  3.32s/steps, loss=0.22277285]     48%|████▊     | 48/100 [02:58<03:01,  3.48s/steps, loss=0.22277285]     48%|████▊     | 48/100 [02:58<03:01,  3.48s/steps, loss=0.23025104]     49%|████▉     | 49/100 [03:01<02:52,  3.38s/steps, loss=0.23025104]     49%|████▉     | 49/100 [03:01<02:52,  3.38s/steps, loss=0.2277698]      50%|█████     | 50/100 [03:04<02:45,  3.31s/steps, loss=0.2277698]     50%|█████     | 50/100 [03:05<02:45,  3.31s/steps, loss=0.22140482]     51%|█████     | 51/100 [03:08<02:42,  3.31s/steps, loss=0.22140482]     51%|█████     | 51/100 [03:08<02:42,  3.31s/steps, loss=0.22193478]     52%|█████▏    | 52/100 [03:08<01:58,  2.48s/steps, loss=0.22193478]     52%|█████▏    | 52/100 [03:08<01:58,  2.48s/steps, loss=0.2200295]      53%|█████▎    | 53/100 [03:09<01:28,  1.89s/steps, loss=0.2200295]     53%|█████▎    | 53/100 [03:09<01:28,  1.89s/steps, loss=0.22228216]     54%|█████▍    | 54/100 [03:09<01:08,  1.48s/steps, loss=0.22228216]     54%|█████▍    | 54/100 [03:09<01:08,  1.48s/steps, loss=0.22099438]     55%|█████▌    | 55/100 [03:10<00:53,  1.19s/steps, loss=0.22099438]     55%|█████▌    | 55/100 [03:10<00:53,  1.19s/steps, loss=0.22084315]     56%|█████▌    | 56/100 [03:10<00:43,  1.01steps/s, loss=0.22084315]     56%|█████▌    | 56/100 [03:10<00:43,  1.01steps/s, loss=0.2211183]      57%|█████▋    | 57/100 [03:11<00:36,  1.18steps/s, loss=0.2211183]     57%|█████▋    | 57/100 [03:11<00:36,  1.18steps/s, loss=0.22264533]     58%|█████▊    | 58/100 [03:11<00:31,  1.34steps/s, loss=0.22264533]     58%|█████▊    | 58/100 [03:12<00:31,  1.34steps/s, loss=0.22497645]     59%|█████▉    | 59/100 [03:12<00:30,  1.34steps/s, loss=0.22497645]     59%|█████▉    | 59/100 [03:12<00:30,  1.34steps/s, loss=0.22403777]     60%|██████    | 60/100 [03:13<00:27,  1.47steps/s, loss=0.22403777]     60%|██████    | 60/100 [03:13<00:27,  1.47steps/s, loss=0.22219498]     61%|██████    | 61/100 [03:13<00:24,  1.58steps/s, loss=0.22219498]     61%|██████    | 61/100 [03:13<00:24,  1.58steps/s, loss=0.22174464]     62%|██████▏   | 62/100 [03:14<00:22,  1.66steps/s, loss=0.22174464]     62%|██████▏   | 62/100 [03:14<00:22,  1.66steps/s, loss=0.22135842]     63%|██████▎   | 63/100 [03:14<00:21,  1.73steps/s, loss=0.22135842]     63%|██████▎   | 63/100 [03:14<00:21,  1.73steps/s, loss=0.22236298]     64%|██████▍   | 64/100 [03:15<00:20,  1.78steps/s, loss=0.22236298]     64%|██████▍   | 64/100 [03:15<00:20,  1.78steps/s, loss=0.22173092]     65%|██████▌   | 65/100 [03:15<00:19,  1.82steps/s, loss=0.22173092]     65%|██████▌   | 65/100 [03:15<00:19,  1.82steps/s, loss=0.22068362]     66%|██████▌   | 66/100 [03:16<00:18,  1.85steps/s, loss=0.22068362]     66%|██████▌   | 66/100 [03:16<00:18,  1.85steps/s, loss=0.22066557]     67%|██████▋   | 67/100 [03:16<00:17,  1.87steps/s, loss=0.22066557]     67%|██████▋   | 67/100 [03:16<00:17,  1.87steps/s, loss=0.22144185]     68%|██████▊   | 68/100 [03:17<00:19,  1.65steps/s, loss=0.22144185]     68%|██████▊   | 68/100 [03:17<00:19,  1.65steps/s, loss=0.22746071]     69%|██████▉   | 69/100 [03:18<00:18,  1.72steps/s, loss=0.22746071]     69%|██████▉   | 69/100 [03:18<00:18,  1.72steps/s, loss=0.22114462]     70%|███████   | 70/100 [03:18<00:16,  1.77steps/s, loss=0.22114462]     70%|███████   | 70/100 [03:18<00:16,  1.77steps/s, loss=0.2206775]      71%|███████   | 71/100 [03:19<00:16,  1.81steps/s, loss=0.2206775]     71%|███████   | 71/100 [03:19<00:16,  1.81steps/s, loss=0.2205002]     72%|███████▏  | 72/100 [03:19<00:15,  1.84steps/s, loss=0.2205002]     72%|███████▏  | 72/100 [03:19<00:15,  1.84steps/s, loss=0.22182302]     73%|███████▎  | 73/100 [03:20<00:14,  1.84steps/s, loss=0.22182302]     73%|███████▎  | 73/100 [03:20<00:14,  1.84steps/s, loss=0.22669838]     74%|███████▍  | 74/100 [03:20<00:13,  1.86steps/s, loss=0.22669838]     74%|███████▍  | 74/100 [03:20<00:13,  1.86steps/s, loss=0.22564068]     75%|███████▌  | 75/100 [03:21<00:13,  1.89steps/s, loss=0.22564068]     75%|███████▌  | 75/100 [03:21<00:13,  1.89steps/s, loss=0.2265131]      76%|███████▌  | 76/100 [03:22<00:14,  1.69steps/s, loss=0.2265131]     76%|███████▌  | 76/100 [03:22<00:14,  1.69steps/s, loss=0.22908284]     77%|███████▋  | 77/100 [03:22<00:13,  1.71steps/s, loss=0.22908284]     77%|███████▋  | 77/100 [03:22<00:13,  1.71steps/s, loss=0.22590856]     78%|███████▊  | 78/100 [03:23<00:12,  1.73steps/s, loss=0.22590856]     78%|███████▊  | 78/100 [03:23<00:12,  1.73steps/s, loss=0.23119628]     79%|███████▉  | 79/100 [03:23<00:11,  1.79steps/s, loss=0.23119628]     79%|███████▉  | 79/100 [03:23<00:11,  1.79steps/s, loss=0.23270167]     80%|████████  | 80/100 [03:24<00:11,  1.82steps/s, loss=0.23270167]     80%|████████  | 80/100 [03:24<00:11,  1.82steps/s, loss=0.23010038]     81%|████████  | 81/100 [03:24<00:10,  1.84steps/s, loss=0.23010038]     81%|████████  | 81/100 [03:24<00:10,  1.84steps/s, loss=0.229633]       82%|████████▏ | 82/100 [03:25<00:09,  1.86steps/s, loss=0.229633]     82%|████████▏ | 82/100 [03:25<00:09,  1.86steps/s, loss=0.23077384]     83%|████████▎ | 83/100 [03:25<00:09,  1.87steps/s, loss=0.23077384]     83%|████████▎ | 83/100 [03:25<00:09,  1.87steps/s, loss=0.23114341]     84%|████████▍ | 84/100 [03:26<00:08,  1.87steps/s, loss=0.23114341]     84%|████████▍ | 84/100 [03:26<00:08,  1.87steps/s, loss=0.23377399]     85%|████████▌ | 85/100 [03:26<00:08,  1.86steps/s, loss=0.23377399]     85%|████████▌ | 85/100 [03:26<00:08,  1.86steps/s, loss=0.22856066]     86%|████████▌ | 86/100 [03:27<00:08,  1.63steps/s, loss=0.22856066]     86%|████████▌ | 86/100 [03:27<00:08,  1.63steps/s, loss=0.22407024]     87%|████████▋ | 87/100 [03:28<00:07,  1.70steps/s, loss=0.22407024]     87%|████████▋ | 87/100 [03:28<00:07,  1.70steps/s, loss=0.22552305]     88%|████████▊ | 88/100 [03:28<00:06,  1.75steps/s, loss=0.22552305]     88%|████████▊ | 88/100 [03:28<00:06,  1.75steps/s, loss=0.22590722]     89%|████████▉ | 89/100 [03:29<00:06,  1.79steps/s, loss=0.22590722]     89%|████████▉ | 89/100 [03:29<00:06,  1.79steps/s, loss=0.22064282]     90%|█████████ | 90/100 [03:29<00:05,  1.82steps/s, loss=0.22064282]     90%|█████████ | 90/100 [03:29<00:05,  1.82steps/s, loss=0.22342962]     91%|█████████ | 91/100 [03:30<00:04,  1.85steps/s, loss=0.22342962]     91%|█████████ | 91/100 [03:30<00:04,  1.85steps/s, loss=0.22201118]     92%|█████████▏| 92/100 [03:30<00:04,  1.86steps/s, loss=0.22201118]     92%|█████████▏| 92/100 [03:30<00:04,  1.86steps/s, loss=0.22190344]     93%|█████████▎| 93/100 [03:31<00:03,  1.88steps/s, loss=0.22190344]     93%|█████████▎| 93/100 [03:31<00:03,  1.88steps/s, loss=0.21787225]     94%|█████████▍| 94/100 [03:31<00:03,  1.89steps/s, loss=0.21787225]     94%|█████████▍| 94/100 [03:31<00:03,  1.89steps/s, loss=0.21663168]     95%|█████████▌| 95/100 [03:32<00:02,  1.68steps/s, loss=0.21663168]     95%|█████████▌| 95/100 [03:32<00:02,  1.68steps/s, loss=0.21799988]     96%|█████████▌| 96/100 [03:33<00:02,  1.74steps/s, loss=0.21799988]     96%|█████████▌| 96/100 [03:33<00:02,  1.74steps/s, loss=0.21862389]     97%|█████████▋| 97/100 [03:33<00:01,  1.79steps/s, loss=0.21862389]     97%|█████████▋| 97/100 [03:33<00:01,  1.79steps/s, loss=0.21876003]     98%|█████████▊| 98/100 [03:34<00:01,  1.82steps/s, loss=0.21876003]     98%|█████████▊| 98/100 [03:34<00:01,  1.82steps/s, loss=0.21866561]     99%|█████████▉| 99/100 [03:34<00:00,  1.84steps/s, loss=0.21866561]     99%|█████████▉| 99/100 [03:34<00:00,  1.84steps/s, loss=0.21989024]    100%|██████████| 100/100 [03:35<00:00,  1.86steps/s, loss=0.21989024]    100%|██████████| 100/100 [03:35<00:00,  2.15s/steps, loss=0.21989024]




.. GENERATED FROM PYTHON SOURCE LINES 255-259

.. image-sg:: /generated/autoexamples/GPU/images/mrinufft_learn_2d_sampling_pattern.gif
   :alt: example learn_samples
   :srcset: /generated/autoexamples/GPU/images/mrinufft_learn_2d_sampling_pattern.gif
   :class: sphx-glr-single-img

.. GENERATED FROM PYTHON SOURCE LINES 261-263

Trained trajectory
------------------

.. GENERATED FROM PYTHON SOURCE LINES 263-268

.. code-block:: Python

    model.eval()
    recon = model(mri_3D)
    plot_state(mri_3D, model.get_trajectory(True).detach().cpu().numpy(), recon, losses)
    plt.show()




.. image-sg:: /generated/autoexamples/GPU/images/sphx_glr_example_learn_straight_line_readouts_002.png
   :alt: MR Image, Reconstruction, Loss, Trajectory
   :srcset: /generated/autoexamples/GPU/images/sphx_glr_example_learn_straight_line_readouts_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 269-284

References
==========

.. [Proj] N. Chauffert, P. Weiss, J. Kahn and P. Ciuciu, "A Projection Algorithm for
          Gradient Waveforms Design in Magnetic Resonance Imaging," in
          IEEE Transactions on Medical Imaging, vol. 35, no. 9, pp. 2026-2039, Sept. 2016,
          doi: 10.1109/TMI.2016.2544251.
.. [Sparks] G. R. Chaithya, P. Weiss, G. Daval-Frérot, A. Massire, A. Vignaud and P. Ciuciu,
          "Optimizing Full 3D SPARKLING Trajectories for High-Resolution Magnetic
          Resonance Imaging," in IEEE Transactions on Medical Imaging, vol. 41, no. 8,
          pp. 2105-2117, Aug. 2022, doi: 10.1109/TMI.2022.3157269.
.. [Projector] Chaithya GR, and Philippe Ciuciu. 2023. "Jointly Learning Non-Cartesian
          k-Space Trajectories and Reconstruction Networks for 2D and 3D MR Imaging
          through Projection" Bioengineering 10, no. 2: 158.
          https://doi.org/10.3390/bioengineering10020158


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (3 minutes 44.091 seconds)


.. _sphx_glr_download_generated_autoexamples_GPU_example_learn_straight_line_readouts.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mind-inria/mri-nufft/gh-pages?urlpath=lab/tree/examples/generated/autoexamples/GPU/example_learn_straight_line_readouts.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_learn_straight_line_readouts.ipynb <example_learn_straight_line_readouts.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_learn_straight_line_readouts.py <example_learn_straight_line_readouts.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: example_learn_straight_line_readouts.zip <example_learn_straight_line_readouts.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
