
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/autoexamples/example_stacked.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_autoexamples_example_stacked.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_autoexamples_example_stacked.py:


======================
Stacked NUFFT Operator
======================

Example of Stacked NUFFT trajectory operator.

This examples show how to use the Stacked NUFFT operator to acquire and reconstruct data
in kspace where the sampling of pattern is a stack of non cartesian trajectory.
Here a stack of spiral is used as a demonstration.

.. GENERATED FROM PYTHON SOURCE LINES 13-21

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np

    from mrinufft import display_2D_trajectory

    plt.rcParams["image.cmap"] = "gray"





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /volatile/github-ci-mind-inria/action-runner/_work/_tool/Python/3.10.14/x64/lib/python3.10/site-packages/cupy/_environment.py:487: UserWarning: 
    --------------------------------------------------------------------------------

      CuPy may not function correctly because multiple CuPy packages are installed
      in your environment:

        cupy-cuda11x, cupy-cuda12x

      Follow these steps to resolve this issue:

        1. For all packages listed above, run the following command to remove all
           existing CuPy installations:

             $ pip uninstall <package_name>

          If you previously installed CuPy via conda, also run the following:

             $ conda uninstall cupy

        2. Install the appropriate CuPy package.
           Refer to the Installation Guide for detailed instructions.

             https://docs.cupy.dev/en/stable/install.html

    --------------------------------------------------------------------------------

      warnings.warn(f'''




.. GENERATED FROM PYTHON SOURCE LINES 22-26

Data Generation
===============
For realistic 3D images we will use the brainweb dataset.
installable using ``pip install brainweb-dl``

.. GENERATED FROM PYTHON SOURCE LINES 26-36

.. code-block:: Python


    from brainweb_dl import get_mri

    mri_data = get_mri(0, "T1")
    mri_data = mri_data[::-1, ...]
    fig, ax = plt.subplots(1, 3)
    ax[0].imshow(mri_data[90, :, :])
    ax[1].imshow(mri_data[:, 108, :])
    ax[2].imshow(mri_data[:, :, 90])




.. image-sg:: /generated/autoexamples/images/sphx_glr_example_stacked_001.png
   :alt: example stacked
   :srcset: /generated/autoexamples/images/sphx_glr_example_stacked_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x76af60fdce50>



.. GENERATED FROM PYTHON SOURCE LINES 37-39

Generate a Spiral trajectory
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 39-50

.. code-block:: Python


    from mrinufft import initialize_2D_spiral
    from mrinufft.density import voronoi

    samples = initialize_2D_spiral(Nc=16, Ns=500, nb_revolutions=10)
    density = voronoi(samples)

    display_2D_trajectory(samples)
    # specify locations for the stack of trajectories.
    kz_slices = np.arange(mri_data.shape[-1])




.. image-sg:: /generated/autoexamples/images/sphx_glr_example_stacked_002.png
   :alt: example stacked
   :srcset: /generated/autoexamples/images/sphx_glr_example_stacked_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 51-53

Setup the Operator
==================

.. GENERATED FROM PYTHON SOURCE LINES 53-79

.. code-block:: Python


    from mrinufft.operators.stacked import MRIStackedNUFFT

    stacked_nufft = MRIStackedNUFFT(
        samples=samples,
        shape=mri_data.shape,
        z_index=kz_slices,
        backend="finufft",
        n_coils=1,
        smaps=None,
        density=density,
    )

    kspace_stack = stacked_nufft.op(mri_data)
    print(kspace_stack.shape)

    mri_data_adj = stacked_nufft.adj_op(kspace_stack)
    mri_data_adj = np.squeeze(abs(mri_data_adj))
    print(mri_data_adj.shape)

    fig2, ax2 = plt.subplots(1, 3)
    ax2[0].imshow(mri_data_adj[90, :, :])
    ax2[1].imshow(mri_data_adj[:, 108, :])
    ax2[2].imshow(mri_data_adj[:, :, 90])

    plt.show()



.. image-sg:: /generated/autoexamples/images/sphx_glr_example_stacked_003.png
   :alt: example stacked
   :srcset: /generated/autoexamples/images/sphx_glr_example_stacked_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /volatile/github-ci-mind-inria/action-runner/_work/_tool/Python/3.10.14/x64/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(
    (1, 1, 1448000)
    (181, 217, 181)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 9.458 seconds)


.. _sphx_glr_download_generated_autoexamples_example_stacked.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mind-inria/mri-nufft/gh-pages?urlpath=lab/tree/examples/generated/autoexamples/example_stacked.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_stacked.ipynb <example_stacked.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_stacked.py <example_stacked.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: example_stacked.zip <example_stacked.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
