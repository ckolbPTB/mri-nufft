
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/autoexamples/example_readme.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_autoexamples_example_readme.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_autoexamples_example_readme.py:


Minimal Example script
======================

This script shows how to use the package to perform a simple NUFFT.

.. GENERATED FROM PYTHON SOURCE LINES 7-58

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np
    from scipy.datasets import face

    import mrinufft
    from mrinufft.density import voronoi
    from mrinufft.trajectories import display

    # Create a 2D Radial trajectory for demo
    samples_loc = mrinufft.initialize_2D_radial(Nc=100, Ns=500)
    # Get a 2D image for the demo (512x512)
    image = np.complex64(face(gray=True)[256:768, 256:768])

    ## The real deal starts here ##
    # Choose your NUFFT backend (installed independly from the package)
    NufftOperator = mrinufft.get_operator("finufft")

    # For better image quality we use a density compensation
    density = voronoi(samples_loc)

    # And create the associated operator.
    nufft = NufftOperator(
        samples_loc, shape=image.shape, density=density, n_coils=1, squeeze_dims=True
    )

    kspace_data = nufft.op(image)  # Image -> Kspace
    image2 = nufft.adj_op(kspace_data)  # Kspace -> Image

    # Show the results
    fig, ax = plt.subplots(2, 2)
    ax = ax.flatten()

    ax[0].imshow(abs(image), cmap="gray")
    ax[0].axis("off")
    ax[0].set_title("original image")
    display.display_2D_trajectory(samples_loc, subfigure=ax[1])
    ax[1].set_aspect("equal")
    ax[1].set_title("Sampled points in k-space")
    ax[2].imshow(abs(image2), cmap="gray")
    ax[2].axis("off")
    ax[2].set_title("Auto adjoint image")
    ax[3].imshow(
        abs(image2) / np.max(abs(image2)) - abs(image) / np.max(abs(image)), cmap="gray"
    )
    ax[3].axis("off")
    ax[3].set_title("Rescaled Error")
    plt.tight_layout()
    plt.show()





.. image-sg:: /generated/autoexamples/images/sphx_glr_example_readme_001.png
   :alt: original image, Sampled points in k-space, Auto adjoint image, Rescaled Error
   :srcset: /generated/autoexamples/images/sphx_glr_example_readme_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /volatile/github-ci-mind-inria/action-runner/_work/_tool/Python/3.10.14/x64/lib/python3.10/site-packages/cupy/_environment.py:487: UserWarning: 
    --------------------------------------------------------------------------------

      CuPy may not function correctly because multiple CuPy packages are installed
      in your environment:

        cupy-cuda11x, cupy-cuda12x

      Follow these steps to resolve this issue:

        1. For all packages listed above, run the following command to remove all
           existing CuPy installations:

             $ pip uninstall <package_name>

          If you previously installed CuPy via conda, also run the following:

             $ conda uninstall cupy

        2. Install the appropriate CuPy package.
           Refer to the Installation Guide for detailed instructions.

             https://docs.cupy.dev/en/stable/install.html

    --------------------------------------------------------------------------------

      warnings.warn(f'''
    /volatile/github-ci-mind-inria/action-runner/_work/_tool/Python/3.10.14/x64/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 59-64

.. note::
   This image is not the same as the original one because the NUFFT operator
   is not a perfect adjoint, and we undersampled by a factor of 5.
   The artefact of reconstruction can be remove by using an iterative reconstruction method.
   Check PySAP-mri documentation for examples.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.105 seconds)


.. _sphx_glr_download_generated_autoexamples_example_readme.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mind-inria/mri-nufft/gh-pages?urlpath=lab/tree/examples/generated/autoexamples/example_readme.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_readme.ipynb <example_readme.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_readme.py <example_readme.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: example_readme.zip <example_readme.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
